{"version":3,"file":"Sorting.js","sources":["../../../src/features/Sorting.ts"],"sourcesContent":["import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInSortType, sortTypes } from '../sortTypes'\n\nimport {\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  ReactTable,\n  Row,\n  Updater,\n} from '../types'\n\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  propGetter,\n} from '../utils'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> =\n  {\n    (\n      rowA: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n      rowB: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n      columnId: string\n    ): number\n  }\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortType<TSortingFns> =\n  | 'auto'\n  | BuiltInSortType\n  | keyof TSortingFns\n  | SortingFn<any, any, any, TSortingFns, any>\n\nexport type SortingColumnDef<TFilterFns> = {\n  sortType?: SortType<TFilterFns>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  defaultCanSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<\n  _TData,\n  _TValue,\n  TFilterFns,\n  _TSortingFns,\n  _TAggregationFns\n> = {\n  sortType: SortType<TFilterFns>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | 'asc' | 'desc'\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n}\n\nexport type SortingOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  sortTypes?: TSortingFns\n  onSortingChange?: OnChangeFn<SortingState>\n  autoResetSorting?: boolean\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  sortRowsFn?: (\n    instance: ReactTable<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >,\n    sortingState: SortingState,\n    globalFilteredRowModel: RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  ) => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: MouseEvent | TouchEvent) => boolean\n}\n\nexport type ToggleSortingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type SortingInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getColumnAutoSortingFn: (\n    columnId: string\n  ) => SortingFn<any, any, any, any, any> | undefined\n\n  getColumnSortingFn: (\n    columnId: string\n  ) => SortingFn<any, any, any, any, any> | undefined\n\n  setSorting: (updater: Updater<SortingState>) => void\n  toggleColumnSorting: (\n    columnId: string,\n    desc?: boolean,\n    multi?: boolean\n  ) => void\n  resetSorting: () => void\n  getColumnCanSort: (columnId: string) => boolean\n  getColumnCanMultiSort: (columnId: string) => boolean\n  getColumnIsSorted: (columnId: string) => false | 'asc' | 'desc'\n  getColumnSortIndex: (columnId: string) => number\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n  getSortedRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreSortedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreSortedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreSortedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getSortedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getSortedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getSortedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n}\n\n//\n\nexport function getDefaultColumn<TFilterFns>(): SortingColumnDef<TFilterFns> {\n  return {\n    sortType: 'auto',\n  }\n}\n\nexport function getInitialState(): SortingTableState {\n  return {\n    sorting: [],\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): SortingOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    onSortingChange: makeStateUpdater('sorting', instance),\n    autoResetSorting: true,\n  }\n}\n\nexport function createColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): SortingColumn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    sortType: column.sortType,\n    getCanSort: () => instance.getColumnCanSort(column.id),\n    getCanMultiSort: () => instance.getColumnCanMultiSort(column.id),\n    getSortIndex: () => instance.getColumnSortIndex(column.id),\n    getIsSorted: () => instance.getColumnIsSorted(column.id),\n    toggleSorting: (desc, isMulti) =>\n      instance.toggleColumnSorting(column.id, desc, isMulti),\n    getToggleSortingProps: userProps =>\n      instance.getToggleSortingProps(column.id, userProps),\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): SortingInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    getColumnAutoSortingFn: columnId => {\n      const firstRow = instance.getGlobalFilteredRowModel().flatRows[0]\n\n      const value = firstRow?.values[columnId]\n\n      if (typeof value === 'string') {\n        return sortTypes.alphanumeric\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return sortTypes.datetime\n      }\n\n      return sortTypes.basic\n    },\n    getColumnSortingFn: columnId => {\n      const column = instance.getColumn(columnId)\n      const userSortTypes = instance.options.sortTypes\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.sortType)\n        ? column.sortType\n        : column.sortType === 'auto'\n        ? instance.getColumnAutoFilterFn(columnId)\n        : (userSortTypes as Record<string, any>)?.[column.sortType as string] ??\n          (sortTypes[column.sortType as BuiltInSortType] as SortingFn<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >)\n    },\n\n    setSorting: updater =>\n      instance.options.onSortingChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().sorting)\n      ),\n\n    toggleColumnSorting: (columnId, desc, multi) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      instance.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old?.find(d => d.id === columnId)\n        const existingIndex = old?.findIndex(d => d.id === columnId)\n        const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n        let newSorting: SortingState = []\n\n        // What should we do with this sort action?\n        let sortAction\n\n        if (!column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'add'\n          }\n        } else {\n          // Normal mode\n          if (old?.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace'\n          } else if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'replace'\n          }\n        }\n\n        const sortDescFirst =\n          column.sortDescFirst ?? instance.options.sortDescFirst\n\n        // Handle toggle states that will remove the sorting\n        if (\n          sortAction === 'toggle' && // Must be toggling\n          (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          !hasDescDefined && // Must not be setting desc\n          (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n          (existingSorting?.desc // Finally, detect if it should indeed be removed\n            ? !sortDescFirst\n            : sortDescFirst)\n        ) {\n          sortAction = 'remove'\n        }\n\n        if (sortAction === 'replace') {\n          newSorting = [\n            {\n              id: columnId,\n              desc: hasDescDefined ? desc! : !!sortDescFirst,\n            },\n          ]\n        } else if (sortAction === 'add' && old?.length) {\n          newSorting = [\n            ...old,\n            {\n              id: columnId,\n              desc: hasDescDefined ? desc! : !!sortDescFirst,\n            },\n          ]\n          // Take latest n columns\n          newSorting.splice(\n            0,\n            newSorting.length -\n              (instance.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n          )\n        } else if (sortAction === 'toggle' && old?.length) {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === columnId) {\n              return {\n                ...d,\n                desc: hasDescDefined ? desc! : !existingSorting?.desc,\n              }\n            }\n            return d\n          })\n        } else if (sortAction === 'remove' && old?.length) {\n          newSorting = old.filter(d => d.id !== columnId)\n        }\n\n        return newSorting\n      })\n    },\n\n    getColumnCanSort: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        column.enableSorting ??\n        instance.options.enableSorting ??\n        column.defaultCanSort ??\n        !!column.accessorFn\n      )\n    },\n\n    getColumnCanMultiSort: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        column.enableMultiSort ??\n        instance.options.enableMultiSort ??\n        !!column.accessorFn\n      )\n    },\n\n    getColumnIsSorted: columnId => {\n      const columnSort = instance\n        .getState()\n        .sorting?.find(d => d.id === columnId)\n\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n    },\n\n    getColumnSortIndex: columnId =>\n      instance.getState().sorting?.findIndex(d => d.id === columnId) ?? -1,\n\n    resetSorting: () => {\n      instance.setSorting(instance.options?.initialState?.sorting ?? [])\n    },\n\n    getToggleSortingProps: (columnId, userProps) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      const canSort = column.getCanSort()\n\n      const initialProps: ToggleSortingProps = {\n        title: canSort ? 'Toggle Sorting' : undefined,\n        onClick: canSort\n          ? (e: MouseEvent | TouchEvent) => {\n              e.persist()\n              column.toggleSorting?.(\n                undefined,\n                column.getCanMultiSort()\n                  ? instance.options.isMultiSortEvent?.(e)\n                  : false\n              )\n            }\n          : undefined,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getSortedRowModel: memo(\n      () => [\n        instance.getState().sorting,\n        instance.getGlobalFilteredRowModel(),\n        instance.options.sortRowsFn,\n      ],\n      (sorting, rowModel, sortingFn) => {\n        if (!sortingFn || !sorting?.length) {\n          return rowModel\n        }\n\n        if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n          console.info('Sorting...')\n\n        return sortingFn(instance, sorting, rowModel)\n      },\n      'getSortedRowModel',\n      instance.options.debug\n    ),\n\n    getPreSortedRows: () => instance.getGlobalFilteredRowModel().rows,\n    getPreSortedFlatRows: () => instance.getGlobalFilteredRowModel().flatRows,\n    getPreSortedRowsById: () => instance.getGlobalFilteredRowModel().rowsById,\n    getSortedRows: () => instance.getSortedRowModel().rows,\n    getSortedFlatRows: () => instance.getSortedRowModel().flatRows,\n    getSortedRowsById: () => instance.getSortedRowModel().rowsById,\n  }\n}\n"],"names":["getDefaultColumn","sortType","getInitialState","sorting","getDefaultOptions","instance","onSortingChange","makeStateUpdater","autoResetSorting","createColumn","column","getCanSort","getColumnCanSort","id","getCanMultiSort","getColumnCanMultiSort","getSortIndex","getColumnSortIndex","getIsSorted","getColumnIsSorted","toggleSorting","desc","isMulti","toggleColumnSorting","getToggleSortingProps","userProps","getInstance","getColumnAutoSortingFn","columnId","firstRow","getGlobalFilteredRowModel","flatRows","value","values","sortTypes","alphanumeric","Object","prototype","toString","call","datetime","basic","getColumnSortingFn","getColumn","userSortTypes","options","Error","isFunction","getColumnAutoFilterFn","setSorting","updater","functionalUpdate","getState","multi","old","existingSorting","find","d","existingIndex","findIndex","hasDescDefined","newSorting","sortAction","length","sortDescFirst","enableSortingRemoval","enableMultiRemove","splice","maxMultiSortColCount","Number","MAX_SAFE_INTEGER","map","filter","enableSorting","defaultCanSort","accessorFn","enableMultiSort","columnSort","resetSorting","initialState","canSort","initialProps","title","undefined","onClick","e","persist","isMultiSortEvent","propGetter","getSortedRowModel","memo","sortRowsFn","rowModel","sortingFn","process","env","NODE_ENV","debug","console","info","getPreSortedRows","rows","getPreSortedFlatRows","getPreSortedRowsById","rowsById","getSortedRows","getSortedFlatRows","getSortedRowsById"],"mappings":";;;;;;;;;;;;;;;;;;AAgMA;AAEO,SAASA,gBAAT,GAAsE;AAC3E,SAAO;AACLC,IAAAA,QAAQ,EAAE;AADL,GAAP;AAGD;AAEM,SAASC,eAAT,GAA8C;AACnD,SAAO;AACLC,IAAAA,OAAO,EAAE;AADJ,GAAP;AAGD;AAEM,SAASC,iBAAT,CAOLC,QAPK,EAQoE;AACzE,SAAO;AACLC,IAAAA,eAAe,EAAEC,sBAAgB,CAAC,SAAD,EAAYF,QAAZ,CAD5B;AAELG,IAAAA,gBAAgB,EAAE;AAFb,GAAP;AAID;AAEM,SAASC,YAAT,CAOLC,MAPK,EAQLL,QARK,EASmE;AACxE,SAAO;AACLJ,IAAAA,QAAQ,EAAES,MAAM,CAACT,QADZ;AAELU,IAAAA,UAAU,EAAE;AAAA,aAAMN,QAAQ,CAACO,gBAAT,CAA0BF,MAAM,CAACG,EAAjC,CAAN;AAAA,KAFP;AAGLC,IAAAA,eAAe,EAAE;AAAA,aAAMT,QAAQ,CAACU,qBAAT,CAA+BL,MAAM,CAACG,EAAtC,CAAN;AAAA,KAHZ;AAILG,IAAAA,YAAY,EAAE;AAAA,aAAMX,QAAQ,CAACY,kBAAT,CAA4BP,MAAM,CAACG,EAAnC,CAAN;AAAA,KAJT;AAKLK,IAAAA,WAAW,EAAE;AAAA,aAAMb,QAAQ,CAACc,iBAAT,CAA2BT,MAAM,CAACG,EAAlC,CAAN;AAAA,KALR;AAMLO,IAAAA,aAAa,EAAE,uBAACC,IAAD,EAAOC,OAAP;AAAA,aACbjB,QAAQ,CAACkB,mBAAT,CAA6Bb,MAAM,CAACG,EAApC,EAAwCQ,IAAxC,EAA8CC,OAA9C,CADa;AAAA,KANV;AAQLE,IAAAA,qBAAqB,EAAE,+BAAAC,SAAS;AAAA,aAC9BpB,QAAQ,CAACmB,qBAAT,CAA+Bd,MAAM,CAACG,EAAtC,EAA0CY,SAA1C,CAD8B;AAAA;AAR3B,GAAP;AAWD;AAEM,SAASC,WAAT,CAOLrB,QAPK,EAQqE;AAC1E,SAAO;AACLsB,IAAAA,sBAAsB,EAAE,gCAAAC,QAAQ,EAAI;AAClC,UAAMC,QAAQ,GAAGxB,QAAQ,CAACyB,yBAAT,GAAqCC,QAArC,CAA8C,CAA9C,CAAjB;AAEA,UAAMC,KAAK,GAAGH,QAAH,oBAAGA,QAAQ,CAAEI,MAAV,CAAiBL,QAAjB,CAAd;;AAEA,UAAI,OAAOI,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAOE,mBAAS,CAACC,YAAjB;AACD;;AAED,UAAIC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,KAA/B,MAA0C,eAA9C,EAA+D;AAC7D,eAAOE,mBAAS,CAACM,QAAjB;AACD;;AAED,aAAON,mBAAS,CAACO,KAAjB;AACD,KAfI;AAgBLC,IAAAA,kBAAkB,EAAE,4BAAAd,QAAQ,EAAI;AAAA;;AAC9B,UAAMlB,MAAM,GAAGL,QAAQ,CAACsC,SAAT,CAAmBf,QAAnB,CAAf;AACA,UAAMgB,aAAa,GAAGvC,QAAQ,CAACwC,OAAT,CAAiBX,SAAvC;;AAEA,UAAI,CAACxB,MAAL,EAAa;AACX,cAAM,IAAIoC,KAAJ,EAAN;AACD;;AAED,aAAOC,gBAAU,CAACrC,MAAM,CAACT,QAAR,CAAV,GACHS,MAAM,CAACT,QADJ,GAEHS,MAAM,CAACT,QAAP,KAAoB,MAApB,GACAI,QAAQ,CAAC2C,qBAAT,CAA+BpB,QAA/B,CADA,WAECgB,aAFD,oBAECA,aAAD,CAAyClC,MAAM,CAACT,QAAhD,CAFA,mBAGCiC,mBAAS,CAACxB,MAAM,CAACT,QAAR,CALd;AAYD,KApCI;AAsCLgD,IAAAA,UAAU,EAAE,oBAAAC,OAAO;AAAA,aACjB7C,QAAQ,CAACwC,OAAT,CAAiBvC,eADA,oBACjBD,QAAQ,CAACwC,OAAT,CAAiBvC,eAAjB,CACE4C,OADF,EAEEC,sBAAgB,CAACD,OAAD,EAAU7C,QAAQ,CAAC+C,QAAT,GAAoBjD,OAA9B,CAFlB,CADiB;AAAA,KAtCd;AA4CLoB,IAAAA,mBAAmB,EAAE,6BAACK,QAAD,EAAWP,IAAX,EAAiBgC,KAAjB,EAA2B;AAC9C,UAAM3C,MAAM,GAAGL,QAAQ,CAACsC,SAAT,CAAmBf,QAAnB,CAAf;;AAEA,UAAI,CAAClB,MAAL,EAAa;AACX,cAAM,IAAIoC,KAAJ,EAAN;AACD;;AAEDzC,MAAAA,QAAQ,CAAC4C,UAAT,CAAoB,UAAAK,GAAG,EAAI;AAAA;;AACzB;AACA,YAAMC,eAAe,GAAGD,GAAH,oBAAGA,GAAG,CAAEE,IAAL,CAAU,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAAC5C,EAAF,KAASe,QAAb;AAAA,SAAX,CAAxB;AACA,YAAM8B,aAAa,GAAGJ,GAAH,oBAAGA,GAAG,CAAEK,SAAL,CAAe,UAAAF,CAAC;AAAA,iBAAIA,CAAC,CAAC5C,EAAF,KAASe,QAAb;AAAA,SAAhB,CAAtB;AACA,YAAMgC,cAAc,GAAG,OAAOvC,IAAP,KAAgB,WAAhB,IAA+BA,IAAI,KAAK,IAA/D;AAEA,YAAIwC,UAAwB,GAAG,EAA/B,CANyB;;AASzB,YAAIC,UAAJ;;AAEA,YAAI,CAACpD,MAAM,CAACI,eAAP,EAAD,IAA6BuC,KAAjC,EAAwC;AACtC,cAAIE,eAAJ,EAAqB;AACnBO,YAAAA,UAAU,GAAG,QAAb;AACD,WAFD,MAEO;AACLA,YAAAA,UAAU,GAAG,KAAb;AACD;AACF,SAND,MAMO;AACL;AACA,cAAIR,GAAG,QAAH,IAAAA,GAAG,CAAES,MAAL,IAAeL,aAAa,KAAKJ,GAAG,CAACS,MAAJ,GAAa,CAAlD,EAAqD;AACnDD,YAAAA,UAAU,GAAG,SAAb;AACD,WAFD,MAEO,IAAIP,eAAJ,EAAqB;AAC1BO,YAAAA,UAAU,GAAG,QAAb;AACD,WAFM,MAEA;AACLA,YAAAA,UAAU,GAAG,SAAb;AACD;AACF;;AAED,YAAME,aAAa,4BACjBtD,MAAM,CAACsD,aADU,oCACO3D,QAAQ,CAACwC,OAAT,CAAiBmB,aAD3C,CA5ByB;;AAgCzB,YACEF,UAAU,KAAK,QAAf;AAAA,iCACCzD,QAAQ,CAACwC,OAAT,CAAiBoB,oBADlB,oCAC0C,IAD1C;AAEA,SAACL,cAFD;AAGCP,QAAAA,KAAK,6BAAGhD,QAAQ,CAACwC,OAAT,CAAiBqB,iBAApB,qCAAyC,IAAzC,GAAgD,IAHtD;AAICX,QAAAA,eAAe,QAAf,IAAAA,eAAe,CAAElC,IAAjB;AAAA,UACG,CAAC2C,aADJ,GAEGA,aANJ,CADF,EAQE;AACAF,UAAAA,UAAU,GAAG,QAAb;AACD;;AAED,YAAIA,UAAU,KAAK,SAAnB,EAA8B;AAC5BD,UAAAA,UAAU,GAAG,CACX;AACEhD,YAAAA,EAAE,EAAEe,QADN;AAEEP,YAAAA,IAAI,EAAEuC,cAAc,GAAGvC,IAAH,GAAW,CAAC,CAAC2C;AAFnC,WADW,CAAb;AAMD,SAPD,MAOO,IAAIF,UAAU,KAAK,KAAf,IAAwBR,GAAxB,YAAwBA,GAAG,CAAES,MAAjC,EAAyC;AAAA;;AAC9CF,UAAAA,UAAU,aACLP,GADK,GAER;AACEzC,YAAAA,EAAE,EAAEe,QADN;AAEEP,YAAAA,IAAI,EAAEuC,cAAc,GAAGvC,IAAH,GAAW,CAAC,CAAC2C;AAFnC,WAFQ,EAAV,CAD8C;;AAS9CH,UAAAA,UAAU,CAACM,MAAX,CACE,CADF,EAEEN,UAAU,CAACE,MAAX,6BACG1D,QAAQ,CAACwC,OAAT,CAAiBuB,oBADpB,oCAC4CC,MAAM,CAACC,gBADnD,CAFF;AAKD,SAdM,MAcA,IAAIR,UAAU,KAAK,QAAf,IAA2BR,GAA3B,YAA2BA,GAAG,CAAES,MAApC,EAA4C;AACjD;AACAF,UAAAA,UAAU,GAAGP,GAAG,CAACiB,GAAJ,CAAQ,UAAAd,CAAC,EAAI;AACxB,gBAAIA,CAAC,CAAC5C,EAAF,KAASe,QAAb,EAAuB;AACrB,8DACK6B,CADL;AAEEpC,gBAAAA,IAAI,EAAEuC,cAAc,GAAGvC,IAAH,GAAW,EAACkC,eAAD,YAACA,eAAe,CAAElC,IAAlB;AAFjC;AAID;;AACD,mBAAOoC,CAAP;AACD,WARY,CAAb;AASD,SAXM,MAWA,IAAIK,UAAU,KAAK,QAAf,IAA2BR,GAA3B,YAA2BA,GAAG,CAAES,MAApC,EAA4C;AACjDF,UAAAA,UAAU,GAAGP,GAAG,CAACkB,MAAJ,CAAW,UAAAf,CAAC;AAAA,mBAAIA,CAAC,CAAC5C,EAAF,KAASe,QAAb;AAAA,WAAZ,CAAb;AACD;;AAED,eAAOiC,UAAP;AACD,OAjFD;AAkFD,KArII;AAuILjD,IAAAA,gBAAgB,EAAE,0BAAAgB,QAAQ,EAAI;AAAA;;AAC5B,UAAMlB,MAAM,GAAGL,QAAQ,CAACsC,SAAT,CAAmBf,QAAnB,CAAf;;AAEA,UAAI,CAAClB,MAAL,EAAa;AACX,cAAM,IAAIoC,KAAJ,EAAN;AACD;;AAED,wDACEpC,MAAM,CAAC+D,aADT,oCAEEpE,QAAQ,CAACwC,OAAT,CAAiB4B,aAFnB,oBAGE/D,MAAM,CAACgE,cAHT,oBAIE,CAAC,CAAChE,MAAM,CAACiE,UAJX;AAMD,KApJI;AAsJL5D,IAAAA,qBAAqB,EAAE,+BAAAa,QAAQ,EAAI;AAAA;;AACjC,UAAMlB,MAAM,GAAGL,QAAQ,CAACsC,SAAT,CAAmBf,QAAnB,CAAf;;AAEA,UAAI,CAAClB,MAAL,EAAa;AACX,cAAM,IAAIoC,KAAJ,EAAN;AACD;;AAED,+CACEpC,MAAM,CAACkE,eADT,oCAEEvE,QAAQ,CAACwC,OAAT,CAAiB+B,eAFnB,oBAGE,CAAC,CAAClE,MAAM,CAACiE,UAHX;AAKD,KAlKI;AAoKLxD,IAAAA,iBAAiB,EAAE,2BAAAS,QAAQ,EAAI;AAAA;;AAC7B,UAAMiD,UAAU,4BAAGxE,QAAQ,CACxB+C,QADgB,GAEhBjD,OAFa,qBAAG,sBAEPqD,IAFO,CAEF,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAC5C,EAAF,KAASe,QAAb;AAAA,OAFC,CAAnB;AAIA,aAAO,CAACiD,UAAD,GAAc,KAAd,GAAsBA,UAAU,CAACxD,IAAX,GAAkB,MAAlB,GAA2B,KAAxD;AACD,KA1KI;AA4KLJ,IAAAA,kBAAkB,EAAE,4BAAAW,QAAQ;AAAA;;AAAA,iEAC1BvB,QAAQ,CAAC+C,QAAT,GAAoBjD,OADM,qBAC1B,uBAA6BwD,SAA7B,CAAuC,UAAAF,CAAC;AAAA,eAAIA,CAAC,CAAC5C,EAAF,KAASe,QAAb;AAAA,OAAxC,CAD0B,qCACwC,CAAC,CADzC;AAAA,KA5KvB;AA+KLkD,IAAAA,YAAY,EAAE,wBAAM;AAAA;;AAClBzE,MAAAA,QAAQ,CAAC4C,UAAT,+CAAoB5C,QAAQ,CAACwC,OAA7B,+CAAoB,kBAAkBkC,YAAtC,qBAAoB,uBAAgC5E,OAApD,oCAA+D,EAA/D;AACD,KAjLI;AAmLLqB,IAAAA,qBAAqB,EAAE,+BAACI,QAAD,EAAWH,SAAX,EAAyB;AAC9C,UAAMf,MAAM,GAAGL,QAAQ,CAACsC,SAAT,CAAmBf,QAAnB,CAAf;;AAEA,UAAI,CAAClB,MAAL,EAAa;AACX,cAAM,IAAIoC,KAAJ,EAAN;AACD;;AAED,UAAMkC,OAAO,GAAGtE,MAAM,CAACC,UAAP,EAAhB;AAEA,UAAMsE,YAAgC,GAAG;AACvCC,QAAAA,KAAK,EAAEF,OAAO,GAAG,gBAAH,GAAsBG,SADG;AAEvCC,QAAAA,OAAO,EAAEJ,OAAO,GACZ,UAACK,CAAD,EAAgC;AAC9BA,UAAAA,CAAC,CAACC,OAAF;AACA5E,UAAAA,MAAM,CAACU,aAAP,oBAAAV,MAAM,CAACU,aAAP,CACE+D,SADF,EAEEzE,MAAM,CAACI,eAAP,KACIT,QAAQ,CAACwC,OAAT,CAAiB0C,gBADrB,oBACIlF,QAAQ,CAACwC,OAAT,CAAiB0C,gBAAjB,CAAoCF,CAApC,CADJ,GAEI,KAJN;AAMD,SATW,GAUZF;AAZmC,OAAzC;AAeA,aAAOK,gBAAU,CAACP,YAAD,EAAexD,SAAf,CAAjB;AACD,KA5MI;AA8MLgE,IAAAA,iBAAiB,EAAEC,UAAI,CACrB;AAAA,aAAM,CACJrF,QAAQ,CAAC+C,QAAT,GAAoBjD,OADhB,EAEJE,QAAQ,CAACyB,yBAAT,EAFI,EAGJzB,QAAQ,CAACwC,OAAT,CAAiB8C,UAHb,CAAN;AAAA,KADqB,EAMrB,UAACxF,OAAD,EAAUyF,QAAV,EAAoBC,SAApB,EAAkC;AAChC,UAAI,CAACA,SAAD,IAAc,EAAC1F,OAAD,YAACA,OAAO,CAAE4D,MAAV,CAAlB,EAAoC;AAClC,eAAO6B,QAAP;AACD;;AAED,UAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC3F,QAAQ,CAACwC,OAAT,CAAiBoD,KAA9D,EACEC,OAAO,CAACC,IAAR,CAAa,YAAb;AAEF,aAAON,SAAS,CAACxF,QAAD,EAAWF,OAAX,EAAoByF,QAApB,CAAhB;AACD,KAfoB,EAgBrB,mBAhBqB,EAiBrBvF,QAAQ,CAACwC,OAAT,CAAiBoD,KAjBI,CA9MlB;AAkOLG,IAAAA,gBAAgB,EAAE;AAAA,aAAM/F,QAAQ,CAACyB,yBAAT,GAAqCuE,IAA3C;AAAA,KAlOb;AAmOLC,IAAAA,oBAAoB,EAAE;AAAA,aAAMjG,QAAQ,CAACyB,yBAAT,GAAqCC,QAA3C;AAAA,KAnOjB;AAoOLwE,IAAAA,oBAAoB,EAAE;AAAA,aAAMlG,QAAQ,CAACyB,yBAAT,GAAqC0E,QAA3C;AAAA,KApOjB;AAqOLC,IAAAA,aAAa,EAAE;AAAA,aAAMpG,QAAQ,CAACoF,iBAAT,GAA6BY,IAAnC;AAAA,KArOV;AAsOLK,IAAAA,iBAAiB,EAAE;AAAA,aAAMrG,QAAQ,CAACoF,iBAAT,GAA6B1D,QAAnC;AAAA,KAtOd;AAuOL4E,IAAAA,iBAAiB,EAAE;AAAA,aAAMtG,QAAQ,CAACoF,iBAAT,GAA6Be,QAAnC;AAAA;AAvOd,GAAP;AAyOD;;;;;;;;"}