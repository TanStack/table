{"version":3,"file":"Expanding.js","sources":["../../../src/features/Expanding.ts"],"sourcesContent":["import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport {\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  ReactTable,\n  Row,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n}\n\nexport type ExpandedOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanded?: boolean\n  expandRowsFn?: (\n    instance: ReactTable<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >,\n    expandedState: ExpandedState,\n    groupedRowModel: RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  ) => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  expandSubRows?: boolean\n  defaultCanExpand?: boolean\n  getIsRowExpanded?: (\n    row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => boolean\n  getRowCanExpand?: (\n    row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ToggleExpandedProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type ExpandedInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleRowExpanded: (rowId: string, expanded?: boolean) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: () => void\n  getRowCanExpand: (rowId: string) => boolean\n  getIsRowExpanded: (rowId: string) => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getToggleAllRowsExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreExpandedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreExpandedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreExpandedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getExpandedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getExpandedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getExpandedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n}\n\n//\n\nexport function getInitialState(): ExpandedTableState {\n  return {\n    expanded: {},\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ExpandedOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    onExpandedChange: makeStateUpdater('expanded', instance),\n    autoResetExpanded: true,\n    getIsRowExpanded: row => !!(row?.original as { expanded?: any }).expanded,\n    expandSubRows: true,\n    paginateExpandedRows: true,\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ExpandedInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    setExpanded: updater =>\n      instance.options.onExpandedChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().expanded)\n      ),\n    toggleRowExpanded: (rowId, expanded) => {\n      if (!rowId) return\n\n      instance.setExpanded((old = {}) => {\n        const exists = old === true ? true : !!old?.[rowId]\n\n        let oldExpanded: ExpandedStateList = {}\n\n        if (old === true) {\n          Object.keys(instance.getRowsById()).forEach(rowId => {\n            oldExpanded[rowId] = true\n          })\n        } else {\n          oldExpanded = old\n        }\n\n        expanded = expanded ?? !exists\n\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [rowId]: true,\n          }\n        }\n\n        if (exists && !expanded) {\n          const { [rowId]: _, ...rest } = oldExpanded\n          return rest\n        }\n\n        return old\n      })\n    },\n    toggleAllRowsExpanded: expanded => {\n      if (expanded ?? !instance.getIsAllRowsExpanded()) {\n        instance.setExpanded(true)\n      } else {\n        instance.setExpanded({})\n      }\n    },\n    resetExpanded: () => {\n      instance.setExpanded(instance.options?.initialState?.expanded ?? {})\n    },\n    getIsRowExpanded: rowId => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `[ReactTable] getIsRowExpanded: no row found with id ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      const expanded = instance.getState().expanded\n\n      return !!(\n        instance.options.getIsRowExpanded?.(row) ??\n        (expanded || expanded?.[rowId])\n      )\n    },\n    getRowCanExpand: rowId => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `[ReactTable] getRowCanExpand: no row found with id ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      return (\n        instance.options.getRowCanExpand?.(row) ??\n        instance.options.enableExpanded ??\n        instance.options.defaultCanExpand ??\n        !!row.subRows?.length\n      )\n    },\n    getToggleExpandedProps: (rowId, userProps) => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        return\n      }\n\n      const canExpand = instance.getRowCanExpand(rowId)\n\n      const initialProps: ToggleExpandedProps = {\n        title: canExpand ? 'Toggle Expanded' : undefined,\n        onClick: canExpand\n          ? (e: MouseEvent | TouchEvent) => {\n              e.persist()\n              instance.toggleRowExpanded(rowId)\n            }\n          : undefined,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n    getToggleAllRowsExpandedProps: userProps => {\n      const initialProps: ToggleExpandedProps = {\n        title: 'Toggle All Expanded',\n        onClick: (e: MouseEvent | TouchEvent) => {\n          e.persist()\n          instance.toggleAllRowsExpanded()\n        },\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n    getIsAllRowsExpanded: () => {\n      const expanded = instance.getState().expanded\n\n      // If expanded is true, save some cycles and return true\n      if (expanded === true) {\n        return true\n      }\n\n      // If any row is not expanded, return false\n      if (\n        Object.keys(instance.getRowsById()).some(\n          id => !instance.getIsRowExpanded(id)\n        )\n      ) {\n        return false\n      }\n\n      // They must all be expanded :shrug:\n      return true\n    },\n    getExpandedDepth: () => {\n      let maxDepth = 0\n\n      const rowIds =\n        instance.getState().expanded === true\n          ? Object.keys(instance.getRowsById())\n          : Object.keys(instance.getState().expanded)\n\n      rowIds.forEach(id => {\n        const splitId = id.split('.')\n        maxDepth = Math.max(maxDepth, splitId.length)\n      })\n\n      return maxDepth\n    },\n    getExpandedRowModel: memo(\n      () => [\n        instance.getState().expanded,\n        instance.getGroupedRowModel(),\n        instance.options.expandRowsFn,\n        instance.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, expandRowsFn, paginateExpandedRows) => {\n        if (\n          !expandRowsFn ||\n          // Do not expand if rows are not included in pagination\n          !paginateExpandedRows ||\n          !Object.keys(expanded ?? {}).length\n        ) {\n          return rowModel\n        }\n\n        if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n          console.info('Expanding...')\n\n        return expandRowsFn(instance, expanded, rowModel)\n      },\n      'getExpandedRowModel',\n      instance.options.debug\n    ),\n\n    getPreExpandedRows: () => instance.getGroupedRowModel().rows,\n    getPreExpandedFlatRows: () => instance.getGroupedRowModel().flatRows,\n    getPreExpandedRowsById: () => instance.getGroupedRowModel().rowsById,\n    getExpandedRows: () => instance.getExpandedRowModel().rows,\n    getExpandedFlatRows: () => instance.getExpandedRowModel().flatRows,\n    getExpandedRowsById: () => instance.getExpandedRowModel().rowsById,\n  }\n}\n\nexport function createRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ExpandedRow {\n  return {\n    toggleExpanded: expanded =>\n      void instance.toggleRowExpanded(row.id, expanded),\n    getIsExpanded: () => instance.getIsRowExpanded(row.id),\n    getCanExpand: () => row.subRows && !!row.subRows.length,\n    getToggleExpandedProps: userProps => {\n      const initialProps: ToggleExpandedProps = {\n        title: 'Toggle Row Expanded',\n        onClick: (e: MouseEvent | TouchEvent) => {\n          e.stopPropagation()\n          instance.toggleRowExpanded(row.id)\n        },\n      }\n      return propGetter(initialProps, userProps)\n    },\n  }\n}\n"],"names":["getInitialState","expanded","getDefaultOptions","instance","onExpandedChange","makeStateUpdater","autoResetExpanded","getIsRowExpanded","row","original","expandSubRows","paginateExpandedRows","getInstance","setExpanded","updater","options","functionalUpdate","getState","toggleRowExpanded","rowId","old","exists","oldExpanded","Object","keys","getRowsById","forEach","rest","toggleAllRowsExpanded","getIsAllRowsExpanded","resetExpanded","initialState","getRow","process","env","NODE_ENV","console","warn","Error","getRowCanExpand","enableExpanded","defaultCanExpand","subRows","length","getToggleExpandedProps","userProps","canExpand","initialProps","title","undefined","onClick","e","persist","propGetter","getToggleAllRowsExpandedProps","some","id","getExpandedDepth","maxDepth","rowIds","splitId","split","Math","max","getExpandedRowModel","memo","getGroupedRowModel","expandRowsFn","rowModel","debug","info","getPreExpandedRows","rows","getPreExpandedFlatRows","flatRows","getPreExpandedRowsById","rowsById","getExpandedRows","getExpandedFlatRows","getExpandedRowsById","createRow","toggleExpanded","getIsExpanded","getCanExpand","stopPropagation"],"mappings":"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"}