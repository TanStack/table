{"version":3,"file":"Headers.js","sources":["../../../src/features/Headers.ts"],"sourcesContent":["import {\n  Cell,\n  Column,\n  FooterGroupProps,\n  FooterProps,\n  Getter,\n  Header,\n  HeaderGroup,\n  HeaderGroupProps,\n  HeaderProps,\n  PropGetterValue,\n  ReactTable,\n  Row,\n} from '../types'\nimport { propGetter, memo, flexRender } from '../utils'\n\nexport type HeadersRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  _getAllVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n}\n\nexport type HeadersInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  createHeader: (\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n    options: {\n      id?: string\n      isPlaceholder?: boolean\n      placeholderId?: string\n      depth: number\n    }\n  ) => Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  getHeaderGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftHeaderGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterHeaderGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightHeaderGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n\n  getFooterGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterFooterGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftFooterGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightFooterGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n\n  getFlatHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftFlatHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterFlatHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightFlatHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n\n  getLeafHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftLeafHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterLeafHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightLeafHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n\n  getHeader: (\n    id: string\n  ) => Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n\n  getHeaderGroupProps: <TGetter extends Getter<HeaderGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderGroupProps, TGetter>\n  getFooterGroupProps: <TGetter extends Getter<FooterGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterGroupProps, TGetter>\n  getHeaderProps: <TGetter extends Getter<HeaderProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderProps, TGetter>\n  getFooterProps: <TGetter extends Getter<FooterProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterProps, TGetter>\n  getTotalWidth: () => number\n}\n\n//\n\nexport function createRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): HeadersRow<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    _getAllVisibleCells: memo(\n      () => [\n        row\n          .getAllCells()\n          .filter(cell => cell.column.getIsVisible())\n          .map(d => d.id)\n          .join('_'),\n      ],\n      _ => {\n        return row.getAllCells().filter(cell => cell.column.getIsVisible())\n      },\n      'row._getAllVisibleCells',\n      instance.options.debug\n    ),\n    getVisibleCells: memo(\n      () => [\n        row.getLeftVisibleCells(),\n        row.getCenterVisibleCells(),\n        row.getRightVisibleCells(),\n      ],\n      (left, center, right) => [...left, ...center, ...right],\n      'row.getVisibleCells',\n      instance.options.debug\n    ),\n    getCenterVisibleCells: memo(\n      () => [\n        row._getAllVisibleCells(),\n        instance.getState().columnPinning.left,\n        instance.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.columnId))\n      },\n      'row.getCenterVisibleCells',\n      instance.options.debug\n    ),\n    getLeftVisibleCells: memo(\n      () => [\n        row._getAllVisibleCells(),\n        instance.getState().columnPinning.left,\n        ,\n      ],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n          .filter(Boolean)\n\n        return cells\n      },\n      'row.getLeftVisibleCells',\n      instance.options.debug\n    ),\n    getRightVisibleCells: memo(\n      () => [\n        row._getAllVisibleCells(),\n        instance.getState().columnPinning.right,\n      ],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n          .filter(Boolean)\n\n        return cells\n      },\n      'row.getRightVisibleCells',\n      instance.options.debug\n    ),\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): HeadersInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    createHeader: (\n      column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n      options: {\n        id?: string\n        isPlaceholder?: boolean\n        placeholderId?: string\n        depth: number\n      }\n    ) => {\n      const id = options.id ?? column.id\n\n      let header: Header<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      > = {\n        id,\n        column,\n        isPlaceholder: options.isPlaceholder,\n        placeholderId: options.placeholderId,\n        depth: options.depth,\n        subHeaders: [],\n        colSpan: 0,\n        rowSpan: 0,\n        getWidth: () => {\n          let sum = 0\n\n          const recurse = (\n            header: Header<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >\n          ) => {\n            if (header.subHeaders.length) {\n              header.subHeaders.forEach(recurse)\n            } else {\n              sum += header.column.getWidth() ?? 0\n            }\n          }\n\n          recurse(header)\n\n          return sum\n        },\n        getLeafHeaders: (): Header<\n          TData,\n          TValue,\n          TFilterFns,\n          TSortingFns,\n          TAggregationFns\n        >[] => {\n          const leafHeaders: Header<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >[] = []\n\n          const recurseHeader = (\n            h: Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n          ) => {\n            if (h.subHeaders && h.subHeaders.length) {\n              h.subHeaders.map(recurseHeader)\n            }\n            leafHeaders.push(h)\n          }\n\n          recurseHeader(header)\n          return leafHeaders\n        },\n        getHeaderProps: userProps =>\n          instance.getHeaderProps(header.id, userProps)!,\n        getFooterProps: userProps =>\n          instance.getFooterProps(header.id, userProps)!,\n        renderHeader: () => flexRender(column.header, { header, column }),\n        renderFooter: () => flexRender(column.footer, { header, column }),\n      }\n\n      return header\n    },\n\n    // Header Groups\n\n    getHeaderGroups: memo(\n      () => [\n        instance.getAllColumns(),\n        instance.getVisibleLeafColumns(),\n        instance.getState().columnPinning.left,\n        instance.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns = leafColumns.filter(column =>\n          left?.includes(column.id)\n        )\n        const rightColumns = leafColumns.filter(column =>\n          right?.includes(column.id)\n        )\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          instance\n        )\n\n        return headerGroups\n      },\n      'getHeaderGroups',\n      instance.options.debug\n    ),\n\n    getCenterHeaderGroups: memo(\n      () => [\n        instance.getAllColumns(),\n        instance.getVisibleLeafColumns(),\n        instance.getState().columnPinning.left,\n        instance.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n      },\n      'getCenterHeaderGroups',\n      instance.options.debug\n    ),\n\n    getLeftHeaderGroups: memo(\n      () => [\n        instance.getAllColumns(),\n        instance.getVisibleLeafColumns(),\n        instance.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        leafColumns = leafColumns.filter(column => left?.includes(column.id))\n        return buildHeaderGroups(allColumns, leafColumns, instance, 'left')\n      },\n      'getLeftHeaderGroups',\n      instance.options.debug\n    ),\n\n    getRightHeaderGroups: memo(\n      () => [\n        instance.getAllColumns(),\n        instance.getVisibleLeafColumns(),\n        instance.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        leafColumns = leafColumns.filter(column => right?.includes(column.id))\n        return buildHeaderGroups(allColumns, leafColumns, instance, 'right')\n      },\n      'getRightHeaderGroups',\n      instance.options.debug\n    ),\n\n    // Footer Groups\n\n    getFooterGroups: memo(\n      () => [instance.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      'getFooterGroups',\n      instance.options.debug\n    ),\n\n    getLeftFooterGroups: memo(\n      () => [instance.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      'getLeftFooterGroups',\n      instance.options.debug\n    ),\n\n    getCenterFooterGroups: memo(\n      () => [instance.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      'getCenterFooterGroups',\n      instance.options.debug\n    ),\n\n    getRightFooterGroups: memo(\n      () => [instance.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      'getRightFooterGroups',\n      instance.options.debug\n    ),\n\n    // Flat Headers\n\n    getFlatHeaders: memo(\n      () => [instance.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      'getFlatHeaders',\n      instance.options.debug\n    ),\n\n    getLeftFlatHeaders: memo(\n      () => [instance.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      'getLeftFlatHeaders',\n      instance.options.debug\n    ),\n\n    getCenterFlatHeaders: memo(\n      () => [instance.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      'getCenterFlatHeaders',\n      instance.options.debug\n    ),\n\n    getRightFlatHeaders: memo(\n      () => [instance.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      'getRightFlatHeaders',\n      instance.options.debug\n    ),\n\n    // Leaf Headers\n\n    getCenterLeafHeaders: memo(\n      () => [instance.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      'getCenterLeafHeaders',\n      instance.options.debug\n    ),\n\n    getLeftLeafHeaders: memo(\n      () => [instance.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      'getLeftLeafHeaders',\n      instance.options.debug\n    ),\n\n    getRightLeafHeaders: memo(\n      () => [instance.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      'getRightLeafHeaders',\n      instance.options.debug\n    ),\n\n    getLeafHeaders: memo(\n      () => [\n        instance.getLeftHeaderGroups(),\n        instance.getCenterHeaderGroups(),\n        instance.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      'getLeafHeaders',\n      instance.options.debug\n    ),\n\n    getHeader: (id: string) => {\n      const header = [\n        ...instance.getFlatHeaders(),\n        ...instance.getCenterFlatHeaders(),\n        ...instance.getLeftFlatHeaders(),\n        ...instance.getRightFlatHeaders(),\n      ].find(d => d.id === id)\n\n      if (!header) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find header with id: ${id}`)\n        }\n        throw new Error()\n      }\n\n      return header\n    },\n\n    getHeaderGroupProps: (id, userProps) => {\n      const headerGroup = instance.getHeaderGroups().find(d => d.id === id)\n\n      if (!headerGroup) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: headerGroup.id,\n          role: 'row',\n        },\n        userProps\n      )\n    },\n\n    getFooterGroupProps: (id, userProps) => {\n      const headerGroup = instance.getFooterGroups().find(d => d.id === id)\n\n      if (!headerGroup) {\n        return\n      }\n\n      const initialProps = {\n        key: headerGroup.id,\n        role: 'row',\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getHeaderProps: (id, userProps) => {\n      const header = instance.getHeader(id)\n\n      if (!header) {\n        throw new Error()\n      }\n\n      const initialProps: HeaderProps = {\n        key: header.id,\n        role: 'columnheader',\n        colSpan: header.colSpan,\n        rowSpan: header.rowSpan,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getFooterProps: (id, userProps) => {\n      const header = instance.getHeader(id)\n      if (!header) {\n        return\n      }\n\n      const initialProps: FooterProps = {\n        key: header.id,\n        role: 'columnfooter',\n        colSpan: header.colSpan,\n        rowSpan: header.rowSpan,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getTotalWidth: () => {\n      let width = 0\n\n      instance.getVisibleLeafColumns().forEach(column => {\n        width += column.getWidth() ?? 0\n      })\n\n      return width\n    },\n  }\n}\n\nexport function buildHeaderGroups<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  allColumns: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnsToGroup: Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[],\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (\n    columns: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n    depth = 1\n  ) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    > = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n      getHeaderGroupProps: getterValue =>\n        instance.getHeaderGroupProps(`${depth}`, getterValue)!,\n      getFooterGroupProps: getterValue =>\n        instance.getFooterGroupProps(`${depth}`, getterValue)!,\n    }\n\n    // The parent columns we're going to scan next\n    const parentHeaders: Header<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestParentHeader = [...parentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      >\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      const header = instance.createHeader(column, {\n        id: [headerFamily, depth, column.id, headerToGroup?.id]\n          .filter(Boolean)\n          .join('_'),\n        isPlaceholder,\n        placeholderId: isPlaceholder\n          ? `${parentHeaders.filter(d => d.column === column).length}`\n          : undefined,\n        depth,\n      })\n\n      if (!latestParentHeader || latestParentHeader.column !== header.column) {\n        header.subHeaders.push(headerToGroup)\n        parentHeaders.push(header)\n      } else {\n        latestParentHeader.subHeaders.push(headerToGroup)\n      }\n\n      // if (!headerToGroup.isPlaceholder) {\n      //   headerToGroup.column.header = headerToGroup;\n      // }\n\n      headerGroup.headers.push(headerToGroup)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(parentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map(column =>\n    instance.createHeader(column, {\n      depth: maxDepth,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  ) => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan > 0 ? colSpan : undefined\n      header.rowSpan = rowSpan > 0 ? rowSpan : undefined\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n"],"names":["createRow","row","instance","_getAllVisibleCells","memo","getAllCells","filter","cell","column","getIsVisible","map","d","id","join","_","options","debug","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","left","center","right","getState","columnPinning","allCells","leftAndRight","includes","columnId","cells","find","Boolean","getInstance","createHeader","header","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","getWidth","sum","recurse","length","forEach","getLeafHeaders","leafHeaders","recurseHeader","h","push","getHeaderProps","userProps","getFooterProps","renderHeader","flexRender","renderFooter","footer","getHeaderGroups","getAllColumns","getVisibleLeafColumns","allColumns","leafColumns","leftColumns","rightColumns","centerColumns","headerGroups","buildHeaderGroups","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headerGroup","headers","flat","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","getHeader","process","env","NODE_ENV","console","warn","Error","getHeaderGroupProps","propGetter","key","role","getFooterGroupProps","initialProps","getTotalWidth","width","columnsToGroup","headerFamily","maxDepth","findMaxDepth","columns","Math","max","createHeaderGroup","headersToGroup","getterValue","parentHeaders","headerToGroup","latestParentHeader","isLeafHeader","parent","undefined","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","min"],"mappings":"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"}