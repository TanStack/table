{"version":3,"file":"Grouping.js","sources":["../../../src/features/Grouping.ts"],"sourcesContent":["import React, { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInAggregationType, aggregationTypes } from '../aggregationTypes'\nimport {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  ReactTable,\n  Row,\n  Updater,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  propGetter,\n} from '../utils'\n\nexport type GroupingState = string[]\n\nexport type AggregationFn = (leafValues: any[], childValues: any[]) => any\n\nexport type AggregationType<TAggregationFns> =\n  | 'auto'\n  | BuiltInAggregationType\n  | keyof TAggregationFns\n  | AggregationFn\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type GroupingColumnDef<TAggregationFns> = {\n  aggregationType?: AggregationType<TAggregationFns>\n  aggregateValue?: (columnValue: unknown) => any\n  renderAggregatedCell?: () => React.ReactNode\n  enableGrouping?: boolean\n  defaultCanGroup?: boolean\n  getCanGroup?: unknown\n}\n\nexport type GroupingColumn<\n  _TData,\n  _TValue,\n  _TFilterFns,\n  _TSortingFns,\n  TAggregationFns\n> = {\n  aggregationType?: AggregationType<TAggregationFns>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  autoResetGrouping: boolean\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  aggregationTypes?: TAggregationFns\n  onGroupingChange?: OnChangeFn<GroupingState>\n  autoResetGrouping?: boolean\n  enableGrouping?: boolean\n  enableGroupingRemoval?: boolean\n  groupRowsFn?: (\n    instance: ReactTable<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >,\n    groupingState: GroupingState,\n    sortedRowsModel: RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  ) => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type ToggleGroupingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type GroupingInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getColumnAutoAggregationFn: (columnId: string) => AggregationFn | undefined\n  getColumnAggregationFn: (columnId: string) => AggregationFn | undefined\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: () => void\n  toggleColumnGrouping: (columnId: string) => void\n  getColumnCanGroup: (columnId: string) => boolean\n  getColumnIsGrouped: (columnId: string) => boolean\n  getColumnGroupedIndex: (columnId: string) => number\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n  getRowIsGrouped: (rowId: string) => boolean\n  getGroupedRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreGroupedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreGroupedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreGroupedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getGroupedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getGroupedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getGroupedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n}\n\n//\n\nexport function getDefaultColumn<TFilterFns>(): GroupingColumnDef<TFilterFns> {\n  return {\n    aggregationType: 'auto',\n  }\n}\n\nexport function getInitialState(): GroupingTableState {\n  return {\n    grouping: [],\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    onGroupingChange: makeStateUpdater('grouping', instance),\n    autoResetGrouping: true,\n    groupedColumnMode: 'reorder',\n  }\n}\n\nexport function createColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingColumn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    aggregationType: column.aggregationType,\n    getCanGroup: () => instance.getColumnCanGroup(column.id),\n    getGroupedIndex: () => instance.getColumnGroupedIndex(column.id),\n    getIsGrouped: () => instance.getColumnIsGrouped(column.id),\n    toggleGrouping: () => instance.toggleColumnGrouping(column.id),\n    getToggleGroupingProps: userProps =>\n      instance.getToggleGroupingProps(column.id, userProps),\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    getColumnAutoAggregationFn: columnId => {\n      const firstRow = instance.getCoreFlatRows()[0]\n\n      const value = firstRow?.values[columnId]\n\n      if (typeof value === 'number') {\n        return aggregationTypes.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationTypes.extent\n      }\n\n      return aggregationTypes.count\n    },\n    getColumnAggregationFn: columnId => {\n      const column = instance.getColumn(columnId)\n      const userAggregationTypes = instance.options.aggregationTypes\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.aggregationType)\n        ? column.aggregationType\n        : column.aggregationType === 'auto'\n        ? instance.getColumnAutoFilterFn(columnId)\n        : (userAggregationTypes as Record<string, any>)?.[\n            column.aggregationType as string\n          ] ??\n          (aggregationTypes[\n            column.aggregationType as BuiltInAggregationType\n          ] as AggregationFn)\n    },\n\n    setGrouping: updater =>\n      instance.options.onGroupingChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().grouping)\n      ),\n\n    toggleColumnGrouping: columnId => {\n      instance.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(columnId)) {\n          return old.filter(d => d !== columnId)\n        }\n\n        return [...(old ?? []), columnId]\n      })\n    },\n\n    getColumnCanGroup: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        column.enableGrouping ??\n        instance.options.enableGrouping ??\n        column.defaultCanGroup ??\n        !!column.accessorFn\n      )\n    },\n\n    getColumnIsGrouped: columnId => {\n      return instance.getState().grouping?.includes(columnId)\n    },\n\n    getColumnGroupedIndex: columnId =>\n      instance.getState().grouping?.indexOf(columnId),\n\n    resetGrouping: () => {\n      instance.setGrouping(instance.options?.initialState?.grouping ?? [])\n    },\n\n    getToggleGroupingProps: (columnId, userProps) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        return\n      }\n\n      const canGroup = column.getCanGroup()\n\n      const initialProps: ToggleGroupingProps = {\n        title: canGroup ? 'Toggle Grouping' : undefined,\n        onClick: canGroup\n          ? (e: MouseEvent | TouchEvent) => {\n              e.persist()\n              column.toggleGrouping?.()\n            }\n          : undefined,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getRowIsGrouped: rowId => !!instance.getRow(rowId)?.groupingColumnId,\n\n    getGroupedRowModel: memo(\n      () => [\n        instance.getState().grouping,\n        instance.getSortedRowModel(),\n        instance.options.groupRowsFn,\n      ],\n      (grouping, rowModel, groupRowsFn) => {\n        if (!groupRowsFn || !grouping.length) {\n          return rowModel\n        }\n\n        if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n          console.info('Grouping...')\n\n        return groupRowsFn(instance, grouping, rowModel)\n      },\n      'getGroupedRowModel',\n      instance.options.debug\n    ),\n\n    getPreGroupedRows: () => instance.getSortedRowModel().rows,\n    getPreGroupedFlatRows: () => instance.getSortedRowModel().flatRows,\n    getPreGroupedRowsById: () => instance.getSortedRowModel().rowsById,\n    getGroupedRows: () => instance.getGroupedRowModel().rows,\n    getGroupedFlatRows: () => instance.getGroupedRowModel().flatRows,\n    getGroupedRowsById: () => instance.getGroupedRowModel().rowsById,\n  }\n}\n\nexport function createRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingRow {\n  return {\n    getIsGrouped: () => instance.getRowIsGrouped(row.id),\n  }\n}\n\nexport function createCell<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  cell: Cell<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> &\n    GroupingCell,\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  _instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingCell {\n  return {\n    getIsGrouped: () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId,\n    getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n    getIsAggregated: () =>\n      !cell.getIsGrouped() &&\n      !cell.getIsPlaceholder() &&\n      row.subRows?.length > 1,\n  }\n}\n\nexport function orderColumns<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  leafColumns: Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n"],"names":["getDefaultColumn","aggregationType","getInitialState","grouping","getDefaultOptions","instance","onGroupingChange","makeStateUpdater","autoResetGrouping","groupedColumnMode","createColumn","column","getCanGroup","getColumnCanGroup","id","getGroupedIndex","getColumnGroupedIndex","getIsGrouped","getColumnIsGrouped","toggleGrouping","toggleColumnGrouping","getToggleGroupingProps","userProps","getInstance","getColumnAutoAggregationFn","columnId","firstRow","getCoreFlatRows","value","values","aggregationTypes","sum","Object","prototype","toString","call","extent","count","getColumnAggregationFn","getColumn","userAggregationTypes","options","Error","isFunction","getColumnAutoFilterFn","setGrouping","updater","functionalUpdate","getState","old","includes","filter","d","enableGrouping","defaultCanGroup","accessorFn","indexOf","resetGrouping","initialState","canGroup","initialProps","title","undefined","onClick","e","persist","propGetter","getRowIsGrouped","rowId","getRow","groupingColumnId","getGroupedRowModel","memo","getSortedRowModel","groupRowsFn","rowModel","length","process","env","NODE_ENV","debug","console","info","getPreGroupedRows","rows","getPreGroupedFlatRows","flatRows","getPreGroupedRowsById","rowsById","getGroupedRows","getGroupedFlatRows","getGroupedRowsById","createRow","row","createCell","cell","_instance","getIsPlaceholder","getIsAggregated","subRows","orderColumns","leafColumns","nonGroupingColumns","col","groupingColumns","map","g","find","Boolean"],"mappings":"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"}