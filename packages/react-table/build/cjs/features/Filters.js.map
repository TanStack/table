{"version":3,"file":"Filters.js","sources":["../../../src/features/Filters.ts"],"sourcesContent":["import { RowModel } from '..'\nimport { BuiltInFilterType, filterTypes } from '../filterTypes'\nimport { Column, OnChangeFn, ReactTable, Row, Updater } from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater, memo } from '../utils'\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type FilterFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> =\n  {\n    (\n      rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n      columnIds: string[],\n      filterValue: any\n    ): any\n    autoRemove?: ColumnFilterAutoRemoveTestFn<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  }\n\nexport type ColumnFilterAutoRemoveTestFn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = (\n  value: unknown,\n  column?: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n) => boolean\n\nexport type CustomFilterTypes<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = Record<\n  string,\n  FilterFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n>\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type FilterType<TFilterFns> =\n  | 'auto'\n  | BuiltInFilterType\n  | keyof TFilterFns\n  | FilterFn<unknown, unknown, TFilterFns, any, any>\n\nexport type FiltersColumnDef<TFilterFns> = {\n  filterType?: FilterType<TFilterFns>\n  enableAllFilters?: boolean\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n  defaultCanFilter?: boolean\n  defaultCanColumnFilter?: boolean\n  defaultCanGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  filterType: FilterType<TFilterFns>\n  getCanColumnFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getColumnFilterIndex: () => number\n  getIsColumnFiltered: () => boolean\n  getColumnFilterValue: () => unknown\n  setColumnFilterValue: (value: any) => void\n  getPreFilteredRows: () =>\n    | Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n    | undefined\n  getPreFilteredUniqueValues: () => Map<any, number>\n  getPreFilteredMinMaxValues: () => [any, any]\n}\n\nexport type FiltersOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  filterFromChildrenUp?: boolean\n  filterTypes?: TFilterFns\n  enableFilters?: boolean\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  autoResetColumnFilters?: boolean\n  enableColumnFilters?: boolean\n  columnFilterRowsFn?: (\n    instance: ReactTable<any, any, any, any, any>,\n    columnFilters: ColumnFiltersState,\n    coreRowModel: RowModel<any, any, any, any, any>\n  ) => RowModel<any, any, any, any, any>\n  // Global\n  globalFilterType?: FilterType<TFilterFns>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilters?: boolean\n  autoResetGlobalFilter?: boolean\n  enableGlobalFilter?: boolean\n  globalFilterRowsFn?: (\n    instance: ReactTable<any, any, any, any, any>,\n    globalFilter: any,\n    columnFilteredRowModel: RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  ) => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  getColumnCanGlobalFilterFn?: (\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => boolean\n}\n\nexport type FiltersInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getColumnAutoFilterFn: (\n    columnId: string\n  ) => FilterFn<any, any, any, any, any> | undefined\n\n  getColumnFilterFn: (\n    columnId: string\n  ) => FilterFn<any, any, any, any, any> | undefined\n\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  setColumnFilterValue: (columnId: string, value: any) => void\n  resetColumnFilters: () => void\n  getColumnCanColumnFilter: (columnId: string) => boolean\n  getColumnCanGlobalFilterFn?: (\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => boolean\n\n  getColumnIsFiltered: (columnId: string) => boolean\n  getColumnFilterValue: (columnId: string) => unknown\n  getColumnFilterIndex: (columnId: string) => number\n  getColumnFilteredRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreColumnFilteredRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreColumnFilteredFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreColumnFilteredRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getColumnFilteredRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getColumnFilteredFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getColumnFilteredRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n\n  // Global\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: () => void\n  getGlobalAutoFilterFn: () => FilterFn<any, any, any, any, any> | undefined\n  getGlobalFilterFn: () => FilterFn<any, any, any, any, any> | undefined\n  getColumnCanGlobalFilter: (columnId: string) => boolean\n  getGlobalFilteredRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreGlobalFilteredRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreGlobalFilteredFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreGlobalFilteredRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getGlobalFilteredRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getGlobalFilteredFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getGlobalFilteredRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n}\n\n//\n\nexport function getDefaultColumn<TFilterFns>(): FiltersColumnDef<TFilterFns> {\n  return {\n    filterType: 'auto',\n  }\n}\n\nexport function getInitialState(): FiltersTableState {\n  return {\n    columnFilters: [],\n    globalFilter: undefined,\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): FiltersOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n    onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n    autoResetColumnFilters: true,\n    filterFromChildrenUp: true,\n    autoResetGlobalFilter: true,\n    globalFilterType: 'auto',\n    getColumnCanGlobalFilterFn: column => {\n      const value = instance.getCoreFlatRows()[0]?.getAllCellsByColumnId()[\n        column.id\n      ]?.value\n\n      return typeof value === 'string'\n    },\n  }\n}\n\nexport function createColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): FiltersColumn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  const getFacetInfo = memo(\n    () => [column.getPreFilteredRows()],\n    (rows = []) => {\n      let preFilteredUniqueValues = new Map<any, number>()\n\n      let preFilteredMinMaxValues: [any, any] = [\n        rows[0]?.values[column.id] ?? null,\n        rows[0]?.values[column.id] ?? null,\n      ]\n\n      for (let i = 0; i < rows.length; i++) {\n        const value = rows[i]?.values[column.id]\n\n        if (preFilteredUniqueValues.has(value)) {\n          preFilteredUniqueValues.set(\n            value,\n            (preFilteredUniqueValues.get(value) ?? 0) + 1\n          )\n        } else {\n          preFilteredUniqueValues.set(value, 1)\n        }\n\n        if (value < preFilteredMinMaxValues[0]) {\n          preFilteredMinMaxValues[0] = value\n        } else if (value > preFilteredMinMaxValues[1]) {\n          preFilteredMinMaxValues[1] = value\n        }\n      }\n\n      return {\n        preFilteredUniqueValues,\n        preFilteredMinMaxValues,\n      }\n    },\n    'column.getFacetInfo',\n    instance.options.debug\n  )\n\n  return {\n    filterType: column.filterType,\n    getCanColumnFilter: () => instance.getColumnCanColumnFilter(column.id),\n    getCanGlobalFilter: () => instance.getColumnCanGlobalFilter(column.id),\n    getColumnFilterIndex: () => instance.getColumnFilterIndex(column.id),\n    getIsColumnFiltered: () => instance.getColumnIsFiltered(column.id),\n    getColumnFilterValue: () => instance.getColumnFilterValue(column.id),\n    setColumnFilterValue: val => instance.setColumnFilterValue(column.id, val),\n    getPreFilteredUniqueValues: () => getFacetInfo().preFilteredUniqueValues,\n    getPreFilteredMinMaxValues: () => getFacetInfo().preFilteredMinMaxValues,\n    getPreFilteredRows: () => undefined,\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): FiltersInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    getColumnAutoFilterFn: columnId => {\n      const firstRow = instance.getCoreFlatRows()[0]\n\n      const value = firstRow?.values[columnId]\n\n      if (typeof value === 'string') {\n        return filterTypes.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterTypes.betweenNumberRange\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterTypes.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterTypes.arrIncludes\n      }\n\n      return filterTypes.weakEquals\n    },\n    getGlobalAutoFilterFn: () => {\n      return filterTypes.includesString\n    },\n    getColumnFilterFn: columnId => {\n      const column = instance.getColumn(columnId)\n      const userFilterTypes = instance.options.filterTypes\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.filterType)\n        ? column.filterType\n        : column.filterType === 'auto'\n        ? instance.getColumnAutoFilterFn(columnId)\n        : (userFilterTypes as Record<string, any>)?.[\n            column.filterType as string\n          ] ??\n          (filterTypes[column.filterType as BuiltInFilterType] as FilterFn<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >)\n    },\n\n    getGlobalFilterFn: () => {\n      const { filterTypes: userFilterTypes, globalFilterType } =\n        instance.options\n\n      return isFunction(globalFilterType)\n        ? globalFilterType\n        : globalFilterType === 'auto'\n        ? instance.getGlobalAutoFilterFn()\n        : (userFilterTypes as Record<string, any>)?.[\n            globalFilterType as string\n          ] ??\n          (filterTypes[globalFilterType as BuiltInFilterType] as FilterFn<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >)\n    },\n\n    setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = instance.getAllLeafColumns()\n\n      const updateFn = (old?: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = instance.getColumnFilterFn(column.id)\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      instance.options.onColumnFiltersChange?.(\n        updateFn,\n        updateFn(instance.getState().columnFilters)\n      )\n    },\n\n    setGlobalFilter: updater => {\n      instance.options.onGlobalFilterChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().globalFilter)\n      )\n    },\n\n    resetGlobalFilter: () => {\n      instance.setGlobalFilter(undefined)\n    },\n\n    getColumnCanColumnFilter: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        column.enableAllFilters ??\n        column.enableColumnFilter ??\n        instance.options.enableFilters ??\n        instance.options.enableColumnFilters ??\n        column.defaultCanFilter ??\n        column.defaultCanColumnFilter ??\n        !!column.accessorFn\n      )\n    },\n\n    getColumnCanGlobalFilter: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        ((instance.options.enableFilters ??\n          instance.options.enableGlobalFilter ??\n          column.enableAllFilters ??\n          column.enableGlobalFilter ??\n          column.defaultCanFilter ??\n          column.defaultCanGlobalFilter ??\n          !!column.accessorFn) &&\n          instance.options.getColumnCanGlobalFilterFn?.(column)) ??\n        true\n      )\n    },\n\n    getColumnIsFiltered: columnId =>\n      instance.getColumnFilterIndex(columnId) > -1,\n\n    getColumnFilterValue: columnId =>\n      instance.getState().columnFilters?.find(d => d.id === columnId)?.value,\n\n    getColumnFilterIndex: columnId =>\n      instance.getState().columnFilters?.findIndex(d => d.id === columnId) ??\n      -1,\n\n    setColumnFilterValue: (columnId, value) => {\n      if (!columnId) return\n\n      instance.setColumnFilters(old => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `React-Table: Could not find a column with id: ${columnId}`\n            )\n          }\n          throw new Error()\n        }\n\n        const filterFn = instance.getColumnFilterFn(column.id)\n        const previousfilter = old?.find(d => d.id === columnId)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousfilter ? previousfilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(\n            filterFn as FilterFn<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >,\n            newFilter,\n            column\n          )\n        ) {\n          return old?.filter(d => d.id !== columnId) ?? []\n        }\n\n        const newFilterObj = { id: columnId, value: newFilter }\n\n        if (previousfilter) {\n          return (\n            old?.map(d => {\n              if (d.id === columnId) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    },\n\n    resetColumnFilters: () => {\n      instance.setColumnFilters(\n        instance.options?.initialState?.columnFilters ?? []\n      )\n    },\n\n    getColumnFilteredRowModel: memo(\n      () => [\n        instance.getState().columnFilters,\n        instance.getCoreRowModel(),\n        instance.options.columnFilterRowsFn,\n      ],\n      (columnFilters, rowModel, columnFiltersFn) => {\n        const columnFilteredRowModel = (() => {\n          if (!columnFilters?.length || !columnFiltersFn) {\n            return rowModel\n          }\n\n          if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n            console.info('Column Filtering...')\n\n          return columnFiltersFn(instance as any, columnFilters, rowModel)\n        })()\n\n        // Now that each filtered column has it's partially filtered rows,\n        // lets assign the final filtered rows to all of the other columns\n        const nonFilteredColumns = instance\n          .getAllLeafColumns()\n          .filter(\n            column =>\n              !instance.getState().columnFilters?.find(d => d.id === column.id)\n          )\n\n        // This essentially enables faceted filter options to be built easily\n        // using every column's preFilteredRows value\n\n        nonFilteredColumns.forEach(column => {\n          column.getPreFilteredRows = () => columnFilteredRowModel.rows\n        })\n\n        return columnFilteredRowModel\n      },\n      'getColumnFilteredRowModel',\n      instance.options.debug\n    ),\n\n    getPreColumnFilteredRows: () => instance.getCoreRowModel().rows,\n    getPreColumnFilteredFlatRows: () => instance.getCoreRowModel().flatRows,\n    getPreColumnFilteredRowsById: () => instance.getCoreRowModel().rowsById,\n    getColumnFilteredRows: () => instance.getColumnFilteredRowModel().rows,\n    getColumnFilteredFlatRows: () =>\n      instance.getColumnFilteredRowModel().flatRows,\n    getColumnFilteredRowsById: () =>\n      instance.getColumnFilteredRowModel().rowsById,\n\n    getGlobalFilteredRowModel: memo(\n      () => [\n        instance.getState().globalFilter,\n        instance.getColumnFilteredRowModel(),\n        instance.options.globalFilterRowsFn,\n      ],\n      (globalFilterValue, columnFilteredRowModel, globalFiltersFn) => {\n        const globalFilteredRowModel = (() => {\n          if (!globalFiltersFn || !globalFilterValue) {\n            return columnFilteredRowModel\n          }\n\n          if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n            console.info('Global Filtering...')\n\n          return globalFiltersFn(\n            instance as ReactTable<any, any, any, any, any>,\n            globalFilterValue,\n            columnFilteredRowModel\n          )\n        })()\n\n        // Now that each filtered column has it's partially filtered rows,\n        // lets assign the final filtered rows to all of the other columns\n        const nonFilteredColumns = instance\n          .getAllLeafColumns()\n          .filter(\n            column =>\n              !instance.getState().columnFilters?.find(d => d.id === column.id)\n          )\n\n        // This essentially enables faceted filter options to be built easily\n        // using every column's preFilteredRows value\n\n        nonFilteredColumns.forEach(column => {\n          column.getPreFilteredRows = () => globalFilteredRowModel.rows\n        })\n\n        return globalFilteredRowModel\n      },\n      'getGlobalFilteredRowModel',\n      instance.options.debug\n    ),\n\n    getPreGlobalFilteredRows: () => instance.getColumnFilteredRowModel().rows,\n    getPreGlobalFilteredFlatRows: () =>\n      instance.getColumnFilteredRowModel().flatRows,\n    getPreGlobalFilteredRowsById: () =>\n      instance.getColumnFilteredRowModel().rowsById,\n    getGlobalFilteredRows: () => instance.getGlobalFilteredRowModel().rows,\n    getGlobalFilteredFlatRows: () =>\n      instance.getGlobalFilteredRowModel().flatRows,\n    getGlobalFilteredRowsById: () =>\n      instance.getGlobalFilteredRowModel().rowsById,\n  }\n}\n\nexport function shouldAutoRemoveFilter(\n  filterFn?: FilterFn<any, any, any, any, any>,\n  value?: any,\n  column?: Column<any, any, any, any, any>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n"],"names":["getDefaultColumn","filterType","getInitialState","columnFilters","globalFilter","undefined","getDefaultOptions","instance","onColumnFiltersChange","makeStateUpdater","onGlobalFilterChange","autoResetColumnFilters","filterFromChildrenUp","autoResetGlobalFilter","globalFilterType","getColumnCanGlobalFilterFn","column","value","getCoreFlatRows","getAllCellsByColumnId","id","createColumn","getFacetInfo","memo","getPreFilteredRows","rows","preFilteredUniqueValues","Map","preFilteredMinMaxValues","values","i","length","has","set","get","options","debug","getCanColumnFilter","getColumnCanColumnFilter","getCanGlobalFilter","getColumnCanGlobalFilter","getColumnFilterIndex","getIsColumnFiltered","getColumnIsFiltered","getColumnFilterValue","setColumnFilterValue","val","getPreFilteredUniqueValues","getPreFilteredMinMaxValues","getInstance","getColumnAutoFilterFn","columnId","firstRow","filterTypes","includesString","betweenNumberRange","equals","Array","isArray","arrIncludes","weakEquals","getGlobalAutoFilterFn","getColumnFilterFn","getColumn","userFilterTypes","Error","isFunction","getGlobalFilterFn","setColumnFilters","updater","leafColumns","getAllLeafColumns","updateFn","old","functionalUpdate","filter","find","d","filterFn","shouldAutoRemoveFilter","getState","setGlobalFilter","resetGlobalFilter","enableAllFilters","enableColumnFilter","enableFilters","enableColumnFilters","defaultCanFilter","defaultCanColumnFilter","accessorFn","enableGlobalFilter","defaultCanGlobalFilter","findIndex","process","env","NODE_ENV","console","warn","previousfilter","newFilter","newFilterObj","map","resetColumnFilters","initialState","getColumnFilteredRowModel","getCoreRowModel","columnFilterRowsFn","rowModel","columnFiltersFn","columnFilteredRowModel","info","nonFilteredColumns","forEach","getPreColumnFilteredRows","getPreColumnFilteredFlatRows","flatRows","getPreColumnFilteredRowsById","rowsById","getColumnFilteredRows","getColumnFilteredFlatRows","getColumnFilteredRowsById","getGlobalFilteredRowModel","globalFilterRowsFn","globalFilterValue","globalFiltersFn","globalFilteredRowModel","getPreGlobalFilteredRows","getPreGlobalFilteredFlatRows","getPreGlobalFilteredRowsById","getGlobalFilteredRows","getGlobalFilteredFlatRows","getGlobalFilteredRowsById","autoRemove"],"mappings":"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"}