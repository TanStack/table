{"version":3,"file":"Visibility.js","sources":["../../../src/features/Visibility.ts"],"sourcesContent":["import {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  ReactTable,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getVisibleFlatColumns: () => Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getVisibleLeafColumns: () => Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  toggleColumnVisibility: (columnId: string, value?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getColumnIsVisible: (columId: string) => boolean\n  getColumnCanHide: (columnId: string) => boolean\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityProps: <\n    TGetter extends Getter<ToggleAllColumnsVisibilityProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleAllColumnsVisibilityProps, TGetter>\n}\n\ntype ToggleVisibilityProps = {}\ntype ToggleAllColumnsVisibilityProps = {}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n  defaultCanHide?: boolean\n}\n\nexport type VisibilityRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityProps: <TGetter extends Getter<ToggleVisibilityProps>>(\n    userProps?: TGetter\n  ) => PropGetterValue<ToggleVisibilityProps, TGetter>\n}\n\n//\n\nexport function getInitialState(): VisibilityTableState {\n  return {\n    columnVisibility: {},\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): VisibilityDefaultOptions {\n  return {\n    onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n  }\n}\n\nexport function getDefaultColumn() {\n  return {\n    defaultIsVisible: true,\n  }\n}\n\nexport function createColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): VisibilityColumn {\n  return {\n    getCanHide: () => instance.getColumnCanHide(column.id),\n    getIsVisible: () => instance.getColumnIsVisible(column.id),\n    toggleVisibility: value =>\n      instance.toggleColumnVisibility(column.id, value),\n    getToggleVisibilityProps: userProps => {\n      const props: ToggleVisibilityProps = {\n        type: 'checkbox',\n        checked: column.getIsVisible?.(),\n        title: 'Toggle Column Visibility',\n        onChange: (e: MouseEvent | TouchEvent) => {\n          column.toggleVisibility?.((e.target as HTMLInputElement).checked)\n        },\n      }\n\n      return propGetter(props, userProps)\n    },\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): VisibilityInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    getVisibleFlatColumns: memo(\n      () => [\n        instance.getAllFlatColumns(),\n        instance\n          .getAllFlatColumns()\n          .filter(d => d.getIsVisible?.())\n          .map(d => d.id)\n          .join('_'),\n      ],\n      allFlatColumns => {\n        return allFlatColumns.filter(d => d.getIsVisible?.())\n      },\n      'getVisibleFlatColumns',\n      instance.options.debug\n    ),\n\n    getVisibleLeafColumns: memo(\n      () => [\n        instance.getAllLeafColumns(),\n        instance\n          .getAllLeafColumns()\n          .filter(d => d.getIsVisible?.())\n          .map(d => d.id)\n          .join('_'),\n      ],\n      allFlatColumns => {\n        return allFlatColumns.filter(d => d.getIsVisible?.())\n      },\n      'getVisibleLeafColumns',\n      instance.options.debug\n    ),\n\n    setColumnVisibility: updater =>\n      instance.options.onColumnVisibilityChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().columnVisibility)\n      ),\n\n    toggleColumnVisibility: (columnId, value) => {\n      if (!columnId) return\n\n      if (instance.getColumnCanHide(columnId)) {\n        instance.setColumnVisibility(old => ({\n          ...old,\n          [columnId]: value ?? !instance.getColumnIsVisible(columnId),\n        }))\n      }\n    },\n\n    toggleAllColumnsVisible: value => {\n      value = value ?? !instance.getIsAllColumnsVisible()\n\n      instance.setColumnVisibility(\n        instance.getAllLeafColumns().reduce(\n          (obj, column) => ({\n            ...obj,\n            [column.id]: !value ? !column.getCanHide?.() : value,\n          }),\n          {}\n        )\n      )\n    },\n\n    getColumnIsVisible: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        instance.getState().columnVisibility?.[columnId] ??\n        column.defaultIsVisible ??\n        true\n      )\n    },\n\n    getColumnCanHide: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        instance.options.enableHiding ??\n        column.enableHiding ??\n        column.defaultCanHide ??\n        true\n      )\n    },\n\n    getIsAllColumnsVisible: () =>\n      !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n    getIsSomeColumnsVisible: () =>\n      instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n    getToggleAllColumnsVisibilityProps: userProps => {\n      const props: ToggleAllColumnsVisibilityProps = {\n        onChange: (e: MouseEvent) => {\n          instance.toggleAllColumnsVisible(\n            (e.target as HTMLInputElement)?.checked\n          )\n        },\n        type: 'checkbox',\n        title: 'Toggle visibility for all columns',\n        checked: instance.getIsAllColumnsVisible(),\n        indeterminate:\n          !instance.getIsAllColumnsVisible() &&\n          instance.getIsSomeColumnsVisible()\n            ? 'indeterminate'\n            : undefined,\n      }\n\n      return propGetter(props, userProps)\n    },\n  }\n}\n"],"names":["getInitialState","columnVisibility","getDefaultOptions","instance","onColumnVisibilityChange","makeStateUpdater","getDefaultColumn","defaultIsVisible","createColumn","column","getCanHide","getColumnCanHide","id","getIsVisible","getColumnIsVisible","toggleVisibility","value","toggleColumnVisibility","getToggleVisibilityProps","userProps","props","type","checked","title","onChange","e","target","propGetter","getInstance","getVisibleFlatColumns","memo","getAllFlatColumns","filter","d","map","join","allFlatColumns","options","debug","getVisibleLeafColumns","getAllLeafColumns","setColumnVisibility","updater","functionalUpdate","getState","columnId","old","toggleAllColumnsVisible","getIsAllColumnsVisible","reduce","obj","getColumn","Error","enableHiding","defaultCanHide","some","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityProps","indeterminate","undefined"],"mappings":"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"}