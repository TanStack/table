{"version":3,"file":"createTable.js","sources":["../../src/createTable.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Cell, Column, Row } from '.'\nimport { createTableInstance } from './core'\nimport { ReactTable, ColumnDef, AccessorFn, Options } from './types'\nimport { Overwrite } from './utils'\n\ntype TableHelper<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> = {\n  RowType: <TTData>() => TableHelper<\n    TTData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n\n  FilterFns: <TTFilterFns>(\n    filterFns: TTFilterFns\n  ) => TableHelper<TData, TValue, TTFilterFns, TSortingFns, TAggregationFns>\n\n  SortingFns: <TTSortingFns>(\n    sortingFns: TTSortingFns\n  ) => TableHelper<TData, TValue, TFilterFns, TTSortingFns, TAggregationFns>\n\n  AggregationFns: <TTAggregationFns>(\n    aggregationFns: TTAggregationFns\n  ) => TableHelper<TData, TValue, TFilterFns, TSortingFns, TTAggregationFns>\n\n  createColumns: (\n    columns: ColumnDef<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n  ) => ColumnDef<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n\n  createGroup: (\n    column: Overwrite<\n      ColumnDef<TData, unknown, TFilterFns, TSortingFns, TAggregationFns>,\n      { __generated?: never; accessorFn?: never; accessorKey?: never }\n    >\n  ) => ColumnDef<TData, unknown, TFilterFns, TSortingFns, TAggregationFns>\n\n  createColumn: <TAccessor extends AccessorFn<TData> | keyof TData>(\n    accessor: TAccessor,\n    column: TAccessor extends (...args: any[]) => any\n      ? // Accessor Fn\n        Overwrite<\n          ColumnDef<\n            TData,\n            ReturnType<TAccessor>,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          {\n            __generated?: never\n            accessorFn?: never\n            accessorKey?: never\n            id: string\n          }\n        >\n      : TAccessor extends keyof TData\n      ? // Accessor Key\n        Overwrite<\n          ColumnDef<\n            TData,\n            TData[TAccessor],\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          { __generated?: never; accessorFn?: never; accessorKey?: never }\n        >\n      : never\n  ) => ColumnDef<\n    TData,\n    TAccessor extends (...args: any[]) => any\n      ? ReturnType<TAccessor>\n      : TAccessor extends keyof TData\n      ? TData[TAccessor]\n      : never,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n\n  useTable: <TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(\n    options: Options<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n\n  types: {\n    instance: ReactTable<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n    columnDef: ColumnDef<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    cell: Cell<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  }\n}\n\nexport function createTable<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(): TableHelper<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    RowType: () => createTable(),\n    FilterFns: () => createTable(),\n    SortingFns: () => createTable(),\n    AggregationFns: () => createTable(),\n    createColumns: columns => columns,\n    createColumn: (accessor, column) => {\n      column = {\n        ...column,\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n          __generated: true,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n          __generated: true,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n    createGroup: column => ({\n      ...column,\n      __generated: true,\n    }),\n    useTable: <TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(\n      options: Options<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    ): ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> => {\n      const instanceRef = React.useRef<\n        ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n      >(undefined!)\n\n      const rerender = React.useReducer(() => ({}), {})[1]\n\n      if (!instanceRef.current) {\n        instanceRef.current = createTableInstance<\n          TData,\n          TValue,\n          TFilterFns,\n          TSortingFns,\n          TAggregationFns\n        >(options, rerender)\n      }\n\n      instanceRef.current.updateOptions(options)\n\n      return instanceRef.current\n    },\n    types: undefined as any,\n  } as TableHelper<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n}\n"],"names":["createTable","RowType","FilterFns","SortingFns","AggregationFns","createColumns","columns","createColumn","accessor","column","id","accessorKey","__generated","accessorFn","Error","createGroup","useTable","options","instanceRef","React","useRef","undefined","rerender","useReducer","current","createTableInstance","updateOptions","types"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHO,SAASA,WAAT,GAMmE;AACxE,SAAO;AACLC,IAAAA,OAAO,EAAE;AAAA,aAAMD,WAAW,EAAjB;AAAA,KADJ;AAELE,IAAAA,SAAS,EAAE;AAAA,aAAMF,WAAW,EAAjB;AAAA,KAFN;AAGLG,IAAAA,UAAU,EAAE;AAAA,aAAMH,WAAW,EAAjB;AAAA,KAHP;AAILI,IAAAA,cAAc,EAAE;AAAA,aAAMJ,WAAW,EAAjB;AAAA,KAJX;AAKLK,IAAAA,aAAa,EAAE,uBAAAC,OAAO;AAAA,aAAIA,OAAJ;AAAA,KALjB;AAMLC,IAAAA,YAAY,EAAE,sBAACC,QAAD,EAAWC,MAAX,EAAsB;AAClCA,MAAAA,MAAM,4CACDA,MADC;AAEJC,QAAAA,EAAE,EAAED,MAAM,CAACC;AAFP,QAAN;;AAKA,UAAI,OAAOF,QAAP,KAAoB,QAAxB,EAAkC;AAAA;;AAChC,wDACKC,MADL;AAEEC,UAAAA,EAAE,gBAAED,MAAM,CAACC,EAAT,yBAAeF,QAFnB;AAGEG,UAAAA,WAAW,EAAEH,QAHf;AAIEI,UAAAA,WAAW,EAAE;AAJf;AAMD;;AAED,UAAI,OAAOJ,QAAP,KAAoB,UAAxB,EAAoC;AAClC,wDACKC,MADL;AAEEI,UAAAA,UAAU,EAAEL,QAFd;AAGEI,UAAAA,WAAW,EAAE;AAHf;AAKD;;AAED,YAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACD,KA9BI;AA+BLC,IAAAA,WAAW,EAAE,qBAAAN,MAAM;AAAA,sDACdA,MADc;AAEjBG,QAAAA,WAAW,EAAE;AAFI;AAAA,KA/Bd;AAmCLI,IAAAA,QAAQ,EAAE,kBACRC,OADQ,EAEgE;AACxE,UAAMC,WAAW,GAAGC,gBAAK,CAACC,MAAN,CAElBC,SAFkB,CAApB;AAIA,UAAMC,QAAQ,GAAGH,gBAAK,CAACI,UAAN,CAAiB;AAAA,eAAO,EAAP;AAAA,OAAjB,EAA6B,EAA7B,EAAiC,CAAjC,CAAjB;;AAEA,UAAI,CAACL,WAAW,CAACM,OAAjB,EAA0B;AACxBN,QAAAA,WAAW,CAACM,OAAZ,GAAsBC,wBAAmB,CAMvCR,OANuC,EAM9BK,QAN8B,CAAzC;AAOD;;AAEDJ,MAAAA,WAAW,CAACM,OAAZ,CAAoBE,aAApB,CAAkCT,OAAlC;AAEA,aAAOC,WAAW,CAACM,OAAnB;AACD,KAzDI;AA0DLG,IAAAA,KAAK,EAAEN;AA1DF,GAAP;AA4DD;;;;"}