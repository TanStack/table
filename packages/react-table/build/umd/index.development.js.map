{"version":3,"file":"index.development.js","sources":["../../src/utils/columnFilterRowsFn.ts","../../src/utils/globalFilterRowsFn.ts","../../src/utils/sortRowsFn.ts","../../src/utils.tsx","../../src/utils/groupRowsFn.ts","../../src/utils/expandRowsFn.ts","../../src/features/Visibility.ts","../../src/aggregationTypes.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pinning.ts","../../src/features/Headers.ts","../../src/filterTypes.ts","../../src/features/Filters.ts","../../src/sortTypes.ts","../../src/features/Sorting.ts","../../src/features/Expanding.ts","../../src/core.tsx","../../src/createTable.tsx"],"sourcesContent":["import { ReactTable, Row, RowModel } from '../types'\nimport { ColumnFiltersState } from '../features/Filters'\nimport { Options } from '..'\n\nexport const columnFilterRowsFn: Options<\n  any,\n  any,\n  {},\n  {},\n  {}\n>['columnFilterRowsFn'] = <\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  columnFilters: ColumnFiltersState,\n  rowModel: RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> => {\n  const newFilteredFlatRows: Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[] = []\n  const newFilteredRowsById: Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  > = {}\n\n  const filterFromChildrenUp = instance.options.filterFromChildrenUp\n\n  const filterRows = (\n    rowsToFilter: Row<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[],\n    depth: number\n  ) => {\n    columnFilters.forEach(({ id: columnId, value: filterValue }) => {\n      // Find the columnFilters column\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `React-Table: Could not find a column with id: ${columnId}`\n          )\n        }\n        throw new Error()\n      }\n\n      if (depth === 0) {\n        const preFilteredRows = [...rowsToFilter]\n        column.getPreFilteredRows = () => preFilteredRows\n      }\n\n      const filterFn = instance.getColumnFilterFn(column.id)\n\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `Could not find a valid 'column.filterType' for column with the ID: ${column.id}.`\n          )\n        }\n        return\n      }\n\n      // Pass the rows, id, filterValue and column to the filterFn\n      // to get the filtered rows back\n      rowsToFilter = filterFn(rowsToFilter, [columnId], filterValue)\n    })\n\n    return rowsToFilter\n  }\n\n  if (filterFromChildrenUp) {\n    const recurseFilterRows = (\n      rowsToFilter: Row<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      >[],\n      depth = 0\n    ) => {\n      // Filter from children up\n      rowsToFilter = rowsToFilter.filter(row => {\n        if (!row.subRows?.length) {\n          return true\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n\n        return row.subRows.length\n      })\n\n      rowsToFilter = filterRows(rowsToFilter, depth)\n\n      // Apply the filter to any subRows\n      rowsToFilter.forEach(row => {\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      })\n\n      return rowsToFilter\n    }\n\n    return {\n      rows: recurseFilterRows(rowModel.rows),\n      flatRows: newFilteredFlatRows,\n      rowsById: newFilteredRowsById,\n    }\n  }\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (\n    rowsToFilter: Row<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[],\n    depth = 0\n  ) => {\n    // Filter from parents downward\n    rowsToFilter = filterRows(rowsToFilter, depth)\n\n    // Apply the filter to any subRows\n    // We technically could do this recursively in the above loop,\n    // but that would severely hinder the API for the user, since they\n    // would be required to do that recursion in some scenarios\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!filterFromChildrenUp) {\n        if (!row.subRows?.length) {\n          return\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n      }\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowModel.rows),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Options } from '..'\nimport { ReactTable, Row, RowModel } from '../types'\n\nexport const globalFilterRowsFn: Options<\n  any,\n  any,\n  {},\n  {},\n  {}\n>['globalFilterRowsFn'] = <\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  globalFilter: any,\n  rowModel: RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> => {\n  const newFilteredFlatRows: Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[] = []\n  const newFilteredRowsById: Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  > = {}\n\n  const filterFromChildrenUp = instance.options.filterFromChildrenUp\n\n  const filterFn = instance.getGlobalFilterFn()\n\n  if (!filterFn) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`Could not find a valid 'globalFilterType'`)\n    }\n    return rowModel\n  }\n\n  const filterableColumns = instance\n    .getAllLeafColumns()\n    .filter(column => column.getCanGlobalFilter())\n\n  const filterableColumnIds = filterableColumns.map(d => d.id)\n\n  if (filterFromChildrenUp) {\n    const recurseFilterRows = (\n      rowsToFilter: Row<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      >[],\n      depth = 0\n    ) => {\n      // Filter from children up\n      rowsToFilter = rowsToFilter.filter(row => {\n        if (!row.subRows?.length) {\n          return true\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n\n        return row.subRows.length\n      })\n\n      rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n      // Apply the filter to any subRows\n      rowsToFilter.forEach(row => {\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      })\n\n      return rowsToFilter\n    }\n\n    return {\n      rows: recurseFilterRows(rowModel.rows),\n      flatRows: newFilteredFlatRows,\n      rowsById: newFilteredRowsById,\n    }\n  }\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (\n    rowsToFilter: Row<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[],\n    depth = 0\n  ) => {\n    // Filter from parents downward\n    rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n    // Apply the filter to any subRows\n    // We technically could do this recursively in the above loop,\n    // but that would severely hinder the API for the user, since they\n    // would be required to do that recursion in some scenarios\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!filterFromChildrenUp) {\n        if (!row.subRows?.length) {\n          return\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n      }\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowModel.rows),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ReactTable, Row, RowModel } from '../types'\nimport { SortingFn, SortingState } from '../features/Sorting'\nimport { Options } from '../types'\n\nexport const sortRowsFn: Options<any, any, {}, {}, {}>['sortRowsFn'] = <\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  sortingState: SortingState,\n  rowModel: RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> => {\n  const sortedFlatRows: Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[] = []\n\n  // Filter out sortings that correspond to non existing columns\n  const availableSorting = sortingState.filter(sort =>\n    instance.getColumnCanSort(sort.id)\n  )\n\n  const columnInfoById: Record<\n    string,\n    {\n      sortUndefined?: false | -1 | 1\n      invertSorting?: boolean\n      sortingFn: SortingFn<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      >\n    }\n  > = {}\n\n  availableSorting.forEach(sortEntry => {\n    const column = instance.getColumn(sortEntry.id)!\n\n    columnInfoById[sortEntry.id] = {\n      sortUndefined: column.sortUndefined,\n      invertSorting: column.invertSorting,\n      sortingFn: instance.getColumnSortingFn(sortEntry.id)!,\n    }\n  })\n\n  const sortData = (\n    rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  ) => {\n    // This will also perform a stable sorting using the row index\n    // if needed.\n    const sortedData = rows.slice()\n\n    sortedData.sort((rowA, rowB) => {\n      for (let i = 0; i < availableSorting.length; i += 1) {\n        const sortEntry = availableSorting[i]!\n        const columnInfo = columnInfoById[sortEntry.id]!\n        const isDesc = sortEntry?.desc ?? false\n\n        if (columnInfo.sortUndefined) {\n          const aValue = rowA.values[sortEntry.id]\n          const bValue = rowB.values[sortEntry.id]\n\n          const aUndefined = typeof aValue === 'undefined'\n          const bUndefined = typeof bValue === 'undefined'\n\n          if (aUndefined || bUndefined) {\n            return aUndefined && bUndefined ? 0 : aUndefined ? 1 : -1\n          }\n        }\n\n        // This function should always return in ascending order\n        let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n        if (sortInt !== 0) {\n          if (isDesc) {\n            sortInt *= -1\n          }\n\n          if (columnInfo.invertSorting) {\n            sortInt *= -1\n          }\n\n          return sortInt\n        }\n      }\n\n      return rowA.index - rowB.index\n    })\n\n    // If there are sub-rows, sort them\n    sortedData.forEach(row => {\n      sortedFlatRows.push(row)\n      if (!row.subRows || row.subRows.length <= 1) {\n        return\n      }\n      row.subRows = sortData(row.subRows)\n    })\n\n    return sortedData\n  }\n\n  return {\n    rows: sortData(rowModel.rows),\n    flatRows: sortedFlatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import React from 'react'\nimport { Getter, NoInfer, PropGetterValue, Renderable } from './types'\n\nexport type IsAny<T> = 0 extends 1 & T ? true : false\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U> = Omit<T, keyof U> & U\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport function functionalUpdate<TInput, TOutput = TInput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: string, instance: unknown) {\n  return (updater: Updater<any, any>) => {\n    ;(instance as any).setState(<TTableState,>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn: any, deps: any[]) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current!, [])\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\ntype PropGetterImpl = <TBaseProps, TGetter extends Getter<TBaseProps>>(\n  initial: TBaseProps,\n  userProps?: TGetter\n) => PropGetterValue<TBaseProps, TGetter>\n\n// @ts-ignore // Just rely on the type, not the implementation\nexport const propGetter: PropGetterImpl = (initial, getter) => {\n  if (isFunction(getter)) {\n    return getter(initial)\n  }\n\n  return {\n    ...initial,\n    ...(getter ?? {}),\n  }\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  key?: string,\n  debug?: boolean\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    const newDeps = getDeps()\n    const newSerializedDeps = newDeps\n    const oldSerializedDeps = deps\n\n    const depsChanged =\n      newSerializedDeps.length !== oldSerializedDeps.length ||\n      newSerializedDeps.some(\n        (dep: any, index: number) => oldSerializedDeps[index] !== dep\n      )\n\n    if (depsChanged) {\n      if (debug) {\n        console.info(key, {\n          length: `${oldSerializedDeps.length} -> ${newSerializedDeps.length}`,\n          ...newSerializedDeps\n            .map((_, index) => {\n              if (oldSerializedDeps[index] !== newSerializedDeps[index]) {\n                return [\n                  index,\n                  oldSerializedDeps[index],\n                  newSerializedDeps[index],\n                ]\n              }\n\n              return false\n            })\n            .filter(Boolean)\n            .reduce(\n              (accu, curr: any) => ({\n                ...accu,\n                [curr[0]]: curr.slice(1),\n              }),\n              {}\n            ),\n          parent,\n        })\n      }\n      result = fn(...newDeps)\n      deps = newSerializedDeps\n    }\n\n    return result!\n  }\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport type Render = typeof flexRender\n\nexport function flexRender<TProps extends {}>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode {\n  return !Comp ? null : isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component: unknown): component is React.FC {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\n// export function hashString(str: string, seed = 0): string {\n//   let h1 = 0xdeadbeef ^ seed,\n//     h2 = 0x41c6ce57 ^ seed\n//   for (let i = 0, ch; i < str.length; i++) {\n//     ch = str.charCodeAt(i)\n//     h1 = Math.imul(h1 ^ ch, 2654435761)\n//     h2 = Math.imul(h2 ^ ch, 1597334677)\n//   }\n//   h1 =\n//     Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^\n//     Math.imul(h2 ^ (h2 >>> 13), 3266489909)\n//   h2 =\n//     Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^\n//     Math.imul(h1 ^ (h1 >>> 13), 3266489909)\n//   return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString()\n// }\n","import { ReactTable, Row, RowModel } from '../types'\nimport { Options } from '../types'\nimport { GroupingState } from '../features/Grouping'\nimport { flattenBy } from '../utils'\n\nexport const groupRowsFn: Options<any, any, {}, {}, {}>['groupRowsFn'] = <\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  groupingState: GroupingState,\n  sortedRowModel: RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n): RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> => {\n  // Filter the grouping list down to columns that exist\n  const existingGrouping = groupingState.filter(columnId =>\n    instance.getColumn(columnId)\n  )\n\n  // Find the columns that can or are aggregating\n  // Uses each column to aggregate rows into a single value\n  const aggregateRowsToValues = (\n    leafRows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n    groupedRows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n    depth: number\n  ) => {\n    const values: Record<string, unknown> = {}\n\n    instance.getAllLeafColumns().forEach(column => {\n      // Don't aggregate columns that are in the grouping\n      if (existingGrouping.includes(column.id)) {\n        values[column.id] = groupedRows[0]\n          ? groupedRows[0].values[column.id]\n          : null\n        return\n      }\n\n      // Aggregate the values\n      const aggregateFn = instance.getColumnAggregationFn(column.id)\n\n      if (aggregateFn) {\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregateValue) {\n            columnValue = column.aggregateValue(columnValue)\n          }\n\n          return columnValue\n        })\n\n        values[column.id] = aggregateFn(leafValues, groupedValues)\n      } else if (column.aggregationType) {\n        console.info({ column })\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `React Table: Invalid column.aggregateType option for column listed above`\n            : ''\n        )\n      } else {\n        values[column.id] = null\n      }\n    })\n\n    return values\n  }\n\n  const groupedFlatRows: Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[] = []\n  const groupedRowsById: Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  > = {}\n  // const onlyGroupedFlatRows: Row[] = [];\n  // const onlyGroupedRowsById: Record<RowId, Row> = {};\n  // const nonGroupedFlatRows: Row[] = [];\n  // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n  // Recursively group the data\n  const groupUpRecursively = (\n    rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n    depth = 0,\n    parentId: string\n  ) => {\n    // This is the last level, just return the rows\n    if (depth === existingGrouping.length) {\n      return rows\n    }\n\n    const columnId = existingGrouping[depth]!\n\n    // Group the rows together for this level\n    const rowGroupsMap = groupBy(rows, columnId)\n\n    // Peform aggregations for each group\n    const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n      ([groupingValue, groupedRows], index) => {\n        let id = `${columnId}:${groupingValue}`\n        id = parentId ? `${parentId}>${id}` : id\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth\n          ? flattenBy(groupedRows, row => row.leafRows)\n          : groupedRows\n\n        const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n        const row = instance.createRow(id, undefined, index, depth, values)\n\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n        })\n\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return row\n      }\n    )\n\n    return aggregatedGroupedRows\n  }\n\n  const groupedRows = groupUpRecursively(sortedRowModel.rows, 0, '')\n\n  groupedRows.forEach(subRow => {\n    groupedFlatRows.push(subRow)\n    groupedRowsById[subRow.id] = subRow\n    // if (subRow.getIsGrouped?.()) {\n    //   onlyGroupedFlatRows.push(subRow);\n    //   onlyGroupedRowsById[subRow.id] = subRow;\n    // } else {\n    //   nonGroupedFlatRows.push(subRow);\n    //   nonGroupedRowsById[subRow.id] = subRow;\n    // }\n  })\n\n  return {\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n  }\n}\n\nfunction groupBy<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnId: string\n) {\n  const groupMap = new Map<\n    any,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  >()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.values[columnId]}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { ReactTable, Row, RowModel } from '../types'\nimport { Options } from '../types'\nimport { ExpandedState } from '../features/Expanding'\n\nexport const expandRowsFn: Options<any, any, {}, {}, {}>['expandRowsFn'] = <\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  _expandedState: ExpandedState,\n  sortedRowModel: RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n): RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> => {\n  const expandedRows: Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[] = []\n\n  const { expandSubRows } = instance.options\n\n  const handleRow = (\n    row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => {\n    expandedRows.push(row)\n\n    if (\n      expandSubRows &&\n      row.subRows?.length &&\n      instance.getIsRowExpanded(row.id)\n    ) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  sortedRowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: sortedRowModel.flatRows,\n    rowsById: sortedRowModel.rowsById,\n  }\n}\n","import {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  ReactTable,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getVisibleFlatColumns: () => Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getVisibleLeafColumns: () => Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  toggleColumnVisibility: (columnId: string, value?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getColumnIsVisible: (columId: string) => boolean\n  getColumnCanHide: (columnId: string) => boolean\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityProps: <\n    TGetter extends Getter<ToggleAllColumnsVisibilityProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleAllColumnsVisibilityProps, TGetter>\n}\n\ntype ToggleVisibilityProps = {}\ntype ToggleAllColumnsVisibilityProps = {}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n  defaultCanHide?: boolean\n}\n\nexport type VisibilityRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityProps: <TGetter extends Getter<ToggleVisibilityProps>>(\n    userProps?: TGetter\n  ) => PropGetterValue<ToggleVisibilityProps, TGetter>\n}\n\n//\n\nexport function getInitialState(): VisibilityTableState {\n  return {\n    columnVisibility: {},\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): VisibilityDefaultOptions {\n  return {\n    onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n  }\n}\n\nexport function getDefaultColumn() {\n  return {\n    defaultIsVisible: true,\n  }\n}\n\nexport function createColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): VisibilityColumn {\n  return {\n    getCanHide: () => instance.getColumnCanHide(column.id),\n    getIsVisible: () => instance.getColumnIsVisible(column.id),\n    toggleVisibility: value =>\n      instance.toggleColumnVisibility(column.id, value),\n    getToggleVisibilityProps: userProps => {\n      const props: ToggleVisibilityProps = {\n        type: 'checkbox',\n        checked: column.getIsVisible?.(),\n        title: 'Toggle Column Visibility',\n        onChange: (e: MouseEvent | TouchEvent) => {\n          column.toggleVisibility?.((e.target as HTMLInputElement).checked)\n        },\n      }\n\n      return propGetter(props, userProps)\n    },\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): VisibilityInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    getVisibleFlatColumns: memo(\n      () => [\n        instance.getAllFlatColumns(),\n        instance\n          .getAllFlatColumns()\n          .filter(d => d.getIsVisible?.())\n          .map(d => d.id)\n          .join('_'),\n      ],\n      allFlatColumns => {\n        return allFlatColumns.filter(d => d.getIsVisible?.())\n      },\n      'getVisibleFlatColumns',\n      instance.options.debug\n    ),\n\n    getVisibleLeafColumns: memo(\n      () => [\n        instance.getAllLeafColumns(),\n        instance\n          .getAllLeafColumns()\n          .filter(d => d.getIsVisible?.())\n          .map(d => d.id)\n          .join('_'),\n      ],\n      allFlatColumns => {\n        return allFlatColumns.filter(d => d.getIsVisible?.())\n      },\n      'getVisibleLeafColumns',\n      instance.options.debug\n    ),\n\n    setColumnVisibility: updater =>\n      instance.options.onColumnVisibilityChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().columnVisibility)\n      ),\n\n    toggleColumnVisibility: (columnId, value) => {\n      if (!columnId) return\n\n      if (instance.getColumnCanHide(columnId)) {\n        instance.setColumnVisibility(old => ({\n          ...old,\n          [columnId]: value ?? !instance.getColumnIsVisible(columnId),\n        }))\n      }\n    },\n\n    toggleAllColumnsVisible: value => {\n      value = value ?? !instance.getIsAllColumnsVisible()\n\n      instance.setColumnVisibility(\n        instance.getAllLeafColumns().reduce(\n          (obj, column) => ({\n            ...obj,\n            [column.id]: !value ? !column.getCanHide?.() : value,\n          }),\n          {}\n        )\n      )\n    },\n\n    getColumnIsVisible: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        instance.getState().columnVisibility?.[columnId] ??\n        column.defaultIsVisible ??\n        true\n      )\n    },\n\n    getColumnCanHide: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        instance.options.enableHiding ??\n        column.enableHiding ??\n        column.defaultCanHide ??\n        true\n      )\n    },\n\n    getIsAllColumnsVisible: () =>\n      !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n    getIsSomeColumnsVisible: () =>\n      instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n    getToggleAllColumnsVisibilityProps: userProps => {\n      const props: ToggleAllColumnsVisibilityProps = {\n        onChange: (e: MouseEvent) => {\n          instance.toggleAllColumnsVisible(\n            (e.target as HTMLInputElement)?.checked\n          )\n        },\n        type: 'checkbox',\n        title: 'Toggle visibility for all columns',\n        checked: instance.getIsAllColumnsVisible(),\n        indeterminate:\n          !instance.getIsAllColumnsVisible() &&\n          instance.getIsSomeColumnsVisible()\n            ? 'indeterminate'\n            : undefined,\n      }\n\n      return propGetter(props, userProps)\n    },\n  }\n}\n","export const aggregationTypes = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationType = keyof typeof aggregationTypes\n\nfunction sum(_leafValues: unknown[], childValues: unknown[]) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childValues.reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(_leafValues: unknown[], childValues: unknown[]) {\n  let min: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  }\n\n  return min\n}\n\nfunction max(_leafValues: unknown[], childValues: unknown[]) {\n  let max: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  }\n\n  return max\n}\n\nfunction extent(_leafValues: unknown[], childValues: unknown[]) {\n  let min: number | undefined\n  let max: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  }\n\n  return [min, max]\n}\n\nfunction mean(leafValues: unknown[]) {\n  let count = 0\n  let sum = 0\n\n  for (let value of leafValues as number[]) {\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  }\n\n  if (count) return sum / count\n\n  return\n}\n\nfunction median(values: unknown[]) {\n  if (!values.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nfunction unique<T>(values: T[]) {\n  return Array.from(new Set(values).values())\n}\n\nfunction uniqueCount(values: unknown[]) {\n  return new Set(values).size\n}\n\nfunction count(values: unknown[]) {\n  return values.length\n}\n","import React, { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInAggregationType, aggregationTypes } from '../aggregationTypes'\nimport {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  ReactTable,\n  Row,\n  Updater,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  propGetter,\n} from '../utils'\n\nexport type GroupingState = string[]\n\nexport type AggregationFn = (leafValues: any[], childValues: any[]) => any\n\nexport type AggregationType<TAggregationFns> =\n  | 'auto'\n  | BuiltInAggregationType\n  | keyof TAggregationFns\n  | AggregationFn\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type GroupingColumnDef<TAggregationFns> = {\n  aggregationType?: AggregationType<TAggregationFns>\n  aggregateValue?: (columnValue: unknown) => any\n  renderAggregatedCell?: () => React.ReactNode\n  enableGrouping?: boolean\n  defaultCanGroup?: boolean\n  getCanGroup?: unknown\n}\n\nexport type GroupingColumn<\n  _TData,\n  _TValue,\n  _TFilterFns,\n  _TSortingFns,\n  TAggregationFns\n> = {\n  aggregationType?: AggregationType<TAggregationFns>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  autoResetGrouping: boolean\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  aggregationTypes?: TAggregationFns\n  onGroupingChange?: OnChangeFn<GroupingState>\n  autoResetGrouping?: boolean\n  enableGrouping?: boolean\n  enableGroupingRemoval?: boolean\n  groupRowsFn?: (\n    instance: ReactTable<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >,\n    groupingState: GroupingState,\n    sortedRowsModel: RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  ) => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type ToggleGroupingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type GroupingInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getColumnAutoAggregationFn: (columnId: string) => AggregationFn | undefined\n  getColumnAggregationFn: (columnId: string) => AggregationFn | undefined\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: () => void\n  toggleColumnGrouping: (columnId: string) => void\n  getColumnCanGroup: (columnId: string) => boolean\n  getColumnIsGrouped: (columnId: string) => boolean\n  getColumnGroupedIndex: (columnId: string) => number\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n  getRowIsGrouped: (rowId: string) => boolean\n  getGroupedRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreGroupedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreGroupedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreGroupedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getGroupedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getGroupedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getGroupedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n}\n\n//\n\nexport function getDefaultColumn<TFilterFns>(): GroupingColumnDef<TFilterFns> {\n  return {\n    aggregationType: 'auto',\n  }\n}\n\nexport function getInitialState(): GroupingTableState {\n  return {\n    grouping: [],\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    onGroupingChange: makeStateUpdater('grouping', instance),\n    autoResetGrouping: true,\n    groupedColumnMode: 'reorder',\n  }\n}\n\nexport function createColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingColumn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    aggregationType: column.aggregationType,\n    getCanGroup: () => instance.getColumnCanGroup(column.id),\n    getGroupedIndex: () => instance.getColumnGroupedIndex(column.id),\n    getIsGrouped: () => instance.getColumnIsGrouped(column.id),\n    toggleGrouping: () => instance.toggleColumnGrouping(column.id),\n    getToggleGroupingProps: userProps =>\n      instance.getToggleGroupingProps(column.id, userProps),\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    getColumnAutoAggregationFn: columnId => {\n      const firstRow = instance.getCoreFlatRows()[0]\n\n      const value = firstRow?.values[columnId]\n\n      if (typeof value === 'number') {\n        return aggregationTypes.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationTypes.extent\n      }\n\n      return aggregationTypes.count\n    },\n    getColumnAggregationFn: columnId => {\n      const column = instance.getColumn(columnId)\n      const userAggregationTypes = instance.options.aggregationTypes\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.aggregationType)\n        ? column.aggregationType\n        : column.aggregationType === 'auto'\n        ? instance.getColumnAutoFilterFn(columnId)\n        : (userAggregationTypes as Record<string, any>)?.[\n            column.aggregationType as string\n          ] ??\n          (aggregationTypes[\n            column.aggregationType as BuiltInAggregationType\n          ] as AggregationFn)\n    },\n\n    setGrouping: updater =>\n      instance.options.onGroupingChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().grouping)\n      ),\n\n    toggleColumnGrouping: columnId => {\n      instance.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(columnId)) {\n          return old.filter(d => d !== columnId)\n        }\n\n        return [...(old ?? []), columnId]\n      })\n    },\n\n    getColumnCanGroup: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        column.enableGrouping ??\n        instance.options.enableGrouping ??\n        column.defaultCanGroup ??\n        !!column.accessorFn\n      )\n    },\n\n    getColumnIsGrouped: columnId => {\n      return instance.getState().grouping?.includes(columnId)\n    },\n\n    getColumnGroupedIndex: columnId =>\n      instance.getState().grouping?.indexOf(columnId),\n\n    resetGrouping: () => {\n      instance.setGrouping(instance.options?.initialState?.grouping ?? [])\n    },\n\n    getToggleGroupingProps: (columnId, userProps) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        return\n      }\n\n      const canGroup = column.getCanGroup()\n\n      const initialProps: ToggleGroupingProps = {\n        title: canGroup ? 'Toggle Grouping' : undefined,\n        onClick: canGroup\n          ? (e: MouseEvent | TouchEvent) => {\n              e.persist()\n              column.toggleGrouping?.()\n            }\n          : undefined,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getRowIsGrouped: rowId => !!instance.getRow(rowId)?.groupingColumnId,\n\n    getGroupedRowModel: memo(\n      () => [\n        instance.getState().grouping,\n        instance.getSortedRowModel(),\n        instance.options.groupRowsFn,\n      ],\n      (grouping, rowModel, groupRowsFn) => {\n        if (!groupRowsFn || !grouping.length) {\n          return rowModel\n        }\n\n        if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n          console.info('Grouping...')\n\n        return groupRowsFn(instance, grouping, rowModel)\n      },\n      'getGroupedRowModel',\n      instance.options.debug\n    ),\n\n    getPreGroupedRows: () => instance.getSortedRowModel().rows,\n    getPreGroupedFlatRows: () => instance.getSortedRowModel().flatRows,\n    getPreGroupedRowsById: () => instance.getSortedRowModel().rowsById,\n    getGroupedRows: () => instance.getGroupedRowModel().rows,\n    getGroupedFlatRows: () => instance.getGroupedRowModel().flatRows,\n    getGroupedRowsById: () => instance.getGroupedRowModel().rowsById,\n  }\n}\n\nexport function createRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingRow {\n  return {\n    getIsGrouped: () => instance.getRowIsGrouped(row.id),\n  }\n}\n\nexport function createCell<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  cell: Cell<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> &\n    GroupingCell,\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  _instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): GroupingCell {\n  return {\n    getIsGrouped: () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId,\n    getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n    getIsAggregated: () =>\n      !cell.getIsGrouped() &&\n      !cell.getIsPlaceholder() &&\n      row.subRows?.length > 1,\n  }\n}\n\nexport function orderColumns<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  leafColumns: Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nimport { ReactTable, OnChangeFn, Updater, Column } from '../types'\n\nimport * as Grouping from './Grouping'\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderTableState = {\n  columnOrder: string[]\n}\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: () => void\n  getOrderColumnsFn: () => (\n    columns: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  ) => Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n}\n\n//\n\nexport function getInitialState(): ColumnOrderTableState {\n  return {\n    columnOrder: [],\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ColumnOrderDefaultOptions {\n  return {\n    onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ColumnOrderInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> {\n  return {\n    setColumnOrder: updater =>\n      instance.options.onColumnOrderChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().columnOrder)\n      ),\n    resetColumnOrder: () => {\n      instance.setColumnOrder(instance.initialState.columnOrder ?? [])\n    },\n    getOrderColumnsFn: memo(\n      () => [\n        instance.getState().columnOrder,\n        instance.getState().grouping,\n        instance.options.groupedColumnMode,\n      ],\n      (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns: Column<\n          TData,\n          TValue,\n          TFilterFns,\n          TSortingFns,\n          TAggregationFns\n        >[] = []\n\n        // If there is no order, return the normal columns\n        if (!columnOrder?.length) {\n          orderedColumns = columns\n        } else {\n          const columnOrderCopy = [...columnOrder]\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns]\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift()\n            const foundIndex = columnsCopy.findIndex(\n              d => d.id === targetColumnId\n            )\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy]\n        }\n\n        return Grouping.orderColumns(\n          orderedColumns,\n          grouping,\n          groupedColumnMode\n        )\n      },\n      'getOrderColumnsFn',\n      instance.options.debug\n    ),\n  }\n}\n","import { OnChangeFn, Updater, ReactTable, Column } from '../types'\nimport { functionalUpdate, makeStateUpdater } from '../utils'\n\ntype ColumnPinningPosition = 'left' | 'right' | 'both'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n  defaultCanPin?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => false | ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningInstance<\n  _TData,\n  _TValue,\n  _TFilterFns,\n  _TSortingFns,\n  _TAggregationFns\n> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: () => void\n  pinColumn: (columnId: string, position: ColumnPinningPosition) => void\n  getColumnCanPin: (columnId: string) => boolean\n  getColumnIsPinned: (columnId: string) => false | ColumnPinningPosition\n  getColumnPinnedIndex: (columnId: string) => number\n}\n\n//\n\nexport function getInitialState(): ColumnPinningTableState {\n  return {\n    columnPinning: {\n      left: [],\n      right: [],\n    },\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ColumnPinningDefaultOptions {\n  return {\n    onColumnPinningChange: makeStateUpdater('columnPinning', instance),\n  }\n}\n\nexport function createColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ColumnPinningColumn {\n  return {\n    getCanPin: () => instance.getColumnCanPin(column.id),\n    getPinnedIndex: () => instance.getColumnPinnedIndex(column.id),\n    getIsPinned: () => instance.getColumnIsPinned(column.id),\n    pin: position => instance.pinColumn(column.id, position),\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ColumnPinningInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> {\n  return {\n    setColumnPinning: updater =>\n      instance.options.onColumnPinningChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().columnPinning)\n      ),\n\n    resetColumnPinning: () =>\n      instance.setColumnPinning(\n        instance.options.initialState?.columnPinning ?? {}\n      ),\n\n    pinColumn: (columnId, position) => {\n      const column = instance.getColumn(columnId)\n\n      const columnIds = column\n        ?.getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      instance.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    },\n\n    getColumnCanPin: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          d.enablePinning ??\n          instance.options.enablePinning ??\n          d.defaultCanPin ??\n          !!d.accessorFn\n      )\n    },\n\n    getColumnIsPinned: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = instance.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      if (isLeft && isRight) {\n        return 'both'\n      }\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    },\n\n    getColumnPinnedIndex: columnId => {\n      const position = instance.getColumnIsPinned(columnId)\n\n      if (position === 'both') {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `Column ${columnId} has leaf columns that are pinned on both sides`\n          )\n        }\n        throw new Error()\n      }\n\n      return position\n        ? instance.getState().columnPinning?.[position]?.indexOf(columnId) ?? -1\n        : 0\n    },\n  }\n}\n","import {\n  Cell,\n  Column,\n  FooterGroupProps,\n  FooterProps,\n  Getter,\n  Header,\n  HeaderGroup,\n  HeaderGroupProps,\n  HeaderProps,\n  PropGetterValue,\n  ReactTable,\n  Row,\n} from '../types'\nimport { propGetter, memo, flexRender } from '../utils'\n\nexport type HeadersRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  _getAllVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightVisibleCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n}\n\nexport type HeadersInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  createHeader: (\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n    options: {\n      id?: string\n      isPlaceholder?: boolean\n      placeholderId?: string\n      depth: number\n    }\n  ) => Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  getHeaderGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftHeaderGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterHeaderGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightHeaderGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n\n  getFooterGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterFooterGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftFooterGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightFooterGroups: () => HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n\n  getFlatHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftFlatHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterFlatHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightFlatHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n\n  getLeafHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeftLeafHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getCenterLeafHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getRightLeafHeaders: () => Header<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n\n  getHeader: (\n    id: string\n  ) => Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n\n  getHeaderGroupProps: <TGetter extends Getter<HeaderGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderGroupProps, TGetter>\n  getFooterGroupProps: <TGetter extends Getter<FooterGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterGroupProps, TGetter>\n  getHeaderProps: <TGetter extends Getter<HeaderProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderProps, TGetter>\n  getFooterProps: <TGetter extends Getter<FooterProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterProps, TGetter>\n  getTotalWidth: () => number\n}\n\n//\n\nexport function createRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): HeadersRow<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    _getAllVisibleCells: memo(\n      () => [\n        row\n          .getAllCells()\n          .filter(cell => cell.column.getIsVisible())\n          .map(d => d.id)\n          .join('_'),\n      ],\n      _ => {\n        return row.getAllCells().filter(cell => cell.column.getIsVisible())\n      },\n      'row._getAllVisibleCells',\n      instance.options.debug\n    ),\n    getVisibleCells: memo(\n      () => [\n        row.getLeftVisibleCells(),\n        row.getCenterVisibleCells(),\n        row.getRightVisibleCells(),\n      ],\n      (left, center, right) => [...left, ...center, ...right],\n      'row.getVisibleCells',\n      instance.options.debug\n    ),\n    getCenterVisibleCells: memo(\n      () => [\n        row._getAllVisibleCells(),\n        instance.getState().columnPinning.left,\n        instance.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.columnId))\n      },\n      'row.getCenterVisibleCells',\n      instance.options.debug\n    ),\n    getLeftVisibleCells: memo(\n      () => [\n        row._getAllVisibleCells(),\n        instance.getState().columnPinning.left,\n        ,\n      ],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n          .filter(Boolean)\n\n        return cells\n      },\n      'row.getLeftVisibleCells',\n      instance.options.debug\n    ),\n    getRightVisibleCells: memo(\n      () => [\n        row._getAllVisibleCells(),\n        instance.getState().columnPinning.right,\n      ],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n          .filter(Boolean)\n\n        return cells\n      },\n      'row.getRightVisibleCells',\n      instance.options.debug\n    ),\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): HeadersInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    createHeader: (\n      column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n      options: {\n        id?: string\n        isPlaceholder?: boolean\n        placeholderId?: string\n        depth: number\n      }\n    ) => {\n      const id = options.id ?? column.id\n\n      let header: Header<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      > = {\n        id,\n        column,\n        isPlaceholder: options.isPlaceholder,\n        placeholderId: options.placeholderId,\n        depth: options.depth,\n        subHeaders: [],\n        colSpan: 0,\n        rowSpan: 0,\n        getWidth: () => {\n          let sum = 0\n\n          const recurse = (\n            header: Header<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >\n          ) => {\n            if (header.subHeaders.length) {\n              header.subHeaders.forEach(recurse)\n            } else {\n              sum += header.column.getWidth() ?? 0\n            }\n          }\n\n          recurse(header)\n\n          return sum\n        },\n        getLeafHeaders: (): Header<\n          TData,\n          TValue,\n          TFilterFns,\n          TSortingFns,\n          TAggregationFns\n        >[] => {\n          const leafHeaders: Header<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >[] = []\n\n          const recurseHeader = (\n            h: Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n          ) => {\n            if (h.subHeaders && h.subHeaders.length) {\n              h.subHeaders.map(recurseHeader)\n            }\n            leafHeaders.push(h)\n          }\n\n          recurseHeader(header)\n          return leafHeaders\n        },\n        getHeaderProps: userProps =>\n          instance.getHeaderProps(header.id, userProps)!,\n        getFooterProps: userProps =>\n          instance.getFooterProps(header.id, userProps)!,\n        renderHeader: () => flexRender(column.header, { header, column }),\n        renderFooter: () => flexRender(column.footer, { header, column }),\n      }\n\n      return header\n    },\n\n    // Header Groups\n\n    getHeaderGroups: memo(\n      () => [\n        instance.getAllColumns(),\n        instance.getVisibleLeafColumns(),\n        instance.getState().columnPinning.left,\n        instance.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns = leafColumns.filter(column =>\n          left?.includes(column.id)\n        )\n        const rightColumns = leafColumns.filter(column =>\n          right?.includes(column.id)\n        )\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          instance\n        )\n\n        return headerGroups\n      },\n      'getHeaderGroups',\n      instance.options.debug\n    ),\n\n    getCenterHeaderGroups: memo(\n      () => [\n        instance.getAllColumns(),\n        instance.getVisibleLeafColumns(),\n        instance.getState().columnPinning.left,\n        instance.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n      },\n      'getCenterHeaderGroups',\n      instance.options.debug\n    ),\n\n    getLeftHeaderGroups: memo(\n      () => [\n        instance.getAllColumns(),\n        instance.getVisibleLeafColumns(),\n        instance.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        leafColumns = leafColumns.filter(column => left?.includes(column.id))\n        return buildHeaderGroups(allColumns, leafColumns, instance, 'left')\n      },\n      'getLeftHeaderGroups',\n      instance.options.debug\n    ),\n\n    getRightHeaderGroups: memo(\n      () => [\n        instance.getAllColumns(),\n        instance.getVisibleLeafColumns(),\n        instance.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        leafColumns = leafColumns.filter(column => right?.includes(column.id))\n        return buildHeaderGroups(allColumns, leafColumns, instance, 'right')\n      },\n      'getRightHeaderGroups',\n      instance.options.debug\n    ),\n\n    // Footer Groups\n\n    getFooterGroups: memo(\n      () => [instance.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      'getFooterGroups',\n      instance.options.debug\n    ),\n\n    getLeftFooterGroups: memo(\n      () => [instance.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      'getLeftFooterGroups',\n      instance.options.debug\n    ),\n\n    getCenterFooterGroups: memo(\n      () => [instance.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      'getCenterFooterGroups',\n      instance.options.debug\n    ),\n\n    getRightFooterGroups: memo(\n      () => [instance.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      'getRightFooterGroups',\n      instance.options.debug\n    ),\n\n    // Flat Headers\n\n    getFlatHeaders: memo(\n      () => [instance.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      'getFlatHeaders',\n      instance.options.debug\n    ),\n\n    getLeftFlatHeaders: memo(\n      () => [instance.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      'getLeftFlatHeaders',\n      instance.options.debug\n    ),\n\n    getCenterFlatHeaders: memo(\n      () => [instance.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      'getCenterFlatHeaders',\n      instance.options.debug\n    ),\n\n    getRightFlatHeaders: memo(\n      () => [instance.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      'getRightFlatHeaders',\n      instance.options.debug\n    ),\n\n    // Leaf Headers\n\n    getCenterLeafHeaders: memo(\n      () => [instance.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      'getCenterLeafHeaders',\n      instance.options.debug\n    ),\n\n    getLeftLeafHeaders: memo(\n      () => [instance.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      'getLeftLeafHeaders',\n      instance.options.debug\n    ),\n\n    getRightLeafHeaders: memo(\n      () => [instance.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      'getRightLeafHeaders',\n      instance.options.debug\n    ),\n\n    getLeafHeaders: memo(\n      () => [\n        instance.getLeftHeaderGroups(),\n        instance.getCenterHeaderGroups(),\n        instance.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      'getLeafHeaders',\n      instance.options.debug\n    ),\n\n    getHeader: (id: string) => {\n      const header = [\n        ...instance.getFlatHeaders(),\n        ...instance.getCenterFlatHeaders(),\n        ...instance.getLeftFlatHeaders(),\n        ...instance.getRightFlatHeaders(),\n      ].find(d => d.id === id)\n\n      if (!header) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find header with id: ${id}`)\n        }\n        throw new Error()\n      }\n\n      return header\n    },\n\n    getHeaderGroupProps: (id, userProps) => {\n      const headerGroup = instance.getHeaderGroups().find(d => d.id === id)\n\n      if (!headerGroup) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: headerGroup.id,\n          role: 'row',\n        },\n        userProps\n      )\n    },\n\n    getFooterGroupProps: (id, userProps) => {\n      const headerGroup = instance.getFooterGroups().find(d => d.id === id)\n\n      if (!headerGroup) {\n        return\n      }\n\n      const initialProps = {\n        key: headerGroup.id,\n        role: 'row',\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getHeaderProps: (id, userProps) => {\n      const header = instance.getHeader(id)\n\n      if (!header) {\n        throw new Error()\n      }\n\n      const initialProps: HeaderProps = {\n        key: header.id,\n        role: 'columnheader',\n        colSpan: header.colSpan,\n        rowSpan: header.rowSpan,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getFooterProps: (id, userProps) => {\n      const header = instance.getHeader(id)\n      if (!header) {\n        return\n      }\n\n      const initialProps: FooterProps = {\n        key: header.id,\n        role: 'columnfooter',\n        colSpan: header.colSpan,\n        rowSpan: header.rowSpan,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getTotalWidth: () => {\n      let width = 0\n\n      instance.getVisibleLeafColumns().forEach(column => {\n        width += column.getWidth() ?? 0\n      })\n\n      return width\n    },\n  }\n}\n\nexport function buildHeaderGroups<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  allColumns: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnsToGroup: Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[],\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (\n    columns: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n    depth = 1\n  ) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    > = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n      getHeaderGroupProps: getterValue =>\n        instance.getHeaderGroupProps(`${depth}`, getterValue)!,\n      getFooterGroupProps: getterValue =>\n        instance.getFooterGroupProps(`${depth}`, getterValue)!,\n    }\n\n    // The parent columns we're going to scan next\n    const parentHeaders: Header<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestParentHeader = [...parentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      >\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      const header = instance.createHeader(column, {\n        id: [headerFamily, depth, column.id, headerToGroup?.id]\n          .filter(Boolean)\n          .join('_'),\n        isPlaceholder,\n        placeholderId: isPlaceholder\n          ? `${parentHeaders.filter(d => d.column === column).length}`\n          : undefined,\n        depth,\n      })\n\n      if (!latestParentHeader || latestParentHeader.column !== header.column) {\n        header.subHeaders.push(headerToGroup)\n        parentHeaders.push(header)\n      } else {\n        latestParentHeader.subHeaders.push(headerToGroup)\n      }\n\n      // if (!headerToGroup.isPlaceholder) {\n      //   headerToGroup.column.header = headerToGroup;\n      // }\n\n      headerGroup.headers.push(headerToGroup)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(parentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map(column =>\n    instance.createHeader(column, {\n      depth: maxDepth,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  ) => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan > 0 ? colSpan : undefined\n      header.rowSpan = rowSpan > 0 ? rowSpan : undefined\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { AccessorFn, Row } from './types'\n\nexport const filterTypes = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  equalsStringSensitive,\n  arrIncludes,\n  arrIncludesAll,\n  equals,\n  weakEquals,\n  betweenNumberRange,\n}\n\nexport type BuiltInFilterType = keyof typeof filterTypes\n\nfunction includesString<\n  TData,\n  TValue,\n  TAccessor extends AccessorFn<TData>,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).toLowerCase().includes(search)\n    })\n  })\n  return rows\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nfunction includesStringSensitive<\n  TData,\n  TValue,\n  TAccessor extends AccessorFn<TData>,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).includes(search)\n    })\n  })\n  return rows\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsString<\n  TData,\n  TValue,\n  TAccessor extends AccessorFn<TData>,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === search\n        : true\n    })\n  })\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsStringSensitive<\n  TData,\n  TValue,\n  TAccessor extends AccessorFn<TData>,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined ? String(rowValue) === search : true\n    })\n  })\n}\n\nequalsStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction arrIncludes<\n  TData,\n  TValue,\n  TAccessor extends AccessorFn<TData>,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction arrIncludesAll<\n  TData,\n  TValue,\n  TAccessor extends AccessorFn<TData>,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnIds: string[],\n  filterValue: unknown[]\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction equals<\n  TData,\n  TValue,\n  TAccessor extends AccessorFn<TData>,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nfunction weakEquals<\n  TData,\n  TValue,\n  TAccessor extends AccessorFn<TData>,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nfunction betweenNumberRange<\n  TData,\n  TValue,\n  TAccessor extends AccessorFn<TData>,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n  columnIds: string[],\n  filterValue: [unknown, unknown]\n) {\n  let [unsafeMin, unsafeMax] = filterValue || []\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetweenNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { BuiltInFilterType, filterTypes } from '../filterTypes'\nimport { Column, OnChangeFn, ReactTable, Row, Updater } from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater, memo } from '../utils'\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type FilterFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> =\n  {\n    (\n      rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[],\n      columnIds: string[],\n      filterValue: any\n    ): any\n    autoRemove?: ColumnFilterAutoRemoveTestFn<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  }\n\nexport type ColumnFilterAutoRemoveTestFn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = (\n  value: unknown,\n  column?: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n) => boolean\n\nexport type CustomFilterTypes<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = Record<\n  string,\n  FilterFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n>\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type FilterType<TFilterFns> =\n  | 'auto'\n  | BuiltInFilterType\n  | keyof TFilterFns\n  | FilterFn<unknown, unknown, TFilterFns, any, any>\n\nexport type FiltersColumnDef<TFilterFns> = {\n  filterType?: FilterType<TFilterFns>\n  enableAllFilters?: boolean\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n  defaultCanFilter?: boolean\n  defaultCanColumnFilter?: boolean\n  defaultCanGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  filterType: FilterType<TFilterFns>\n  getCanColumnFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getColumnFilterIndex: () => number\n  getIsColumnFiltered: () => boolean\n  getColumnFilterValue: () => unknown\n  setColumnFilterValue: (value: any) => void\n  getPreFilteredRows: () =>\n    | Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n    | undefined\n  getPreFilteredUniqueValues: () => Map<any, number>\n  getPreFilteredMinMaxValues: () => [any, any]\n}\n\nexport type FiltersOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  filterFromChildrenUp?: boolean\n  filterTypes?: TFilterFns\n  enableFilters?: boolean\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  autoResetColumnFilters?: boolean\n  enableColumnFilters?: boolean\n  columnFilterRowsFn?: (\n    instance: ReactTable<any, any, any, any, any>,\n    columnFilters: ColumnFiltersState,\n    coreRowModel: RowModel<any, any, any, any, any>\n  ) => RowModel<any, any, any, any, any>\n  // Global\n  globalFilterType?: FilterType<TFilterFns>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilters?: boolean\n  autoResetGlobalFilter?: boolean\n  enableGlobalFilter?: boolean\n  globalFilterRowsFn?: (\n    instance: ReactTable<any, any, any, any, any>,\n    globalFilter: any,\n    columnFilteredRowModel: RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  ) => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  getColumnCanGlobalFilterFn?: (\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => boolean\n}\n\nexport type FiltersInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getColumnAutoFilterFn: (\n    columnId: string\n  ) => FilterFn<any, any, any, any, any> | undefined\n\n  getColumnFilterFn: (\n    columnId: string\n  ) => FilterFn<any, any, any, any, any> | undefined\n\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  setColumnFilterValue: (columnId: string, value: any) => void\n  resetColumnFilters: () => void\n  getColumnCanColumnFilter: (columnId: string) => boolean\n  getColumnCanGlobalFilterFn?: (\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => boolean\n\n  getColumnIsFiltered: (columnId: string) => boolean\n  getColumnFilterValue: (columnId: string) => unknown\n  getColumnFilterIndex: (columnId: string) => number\n  getColumnFilteredRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreColumnFilteredRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreColumnFilteredFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreColumnFilteredRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getColumnFilteredRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getColumnFilteredFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getColumnFilteredRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n\n  // Global\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: () => void\n  getGlobalAutoFilterFn: () => FilterFn<any, any, any, any, any> | undefined\n  getGlobalFilterFn: () => FilterFn<any, any, any, any, any> | undefined\n  getColumnCanGlobalFilter: (columnId: string) => boolean\n  getGlobalFilteredRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreGlobalFilteredRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreGlobalFilteredFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreGlobalFilteredRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getGlobalFilteredRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getGlobalFilteredFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getGlobalFilteredRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n}\n\n//\n\nexport function getDefaultColumn<TFilterFns>(): FiltersColumnDef<TFilterFns> {\n  return {\n    filterType: 'auto',\n  }\n}\n\nexport function getInitialState(): FiltersTableState {\n  return {\n    columnFilters: [],\n    globalFilter: undefined,\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): FiltersOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n    onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n    autoResetColumnFilters: true,\n    filterFromChildrenUp: true,\n    autoResetGlobalFilter: true,\n    globalFilterType: 'auto',\n    getColumnCanGlobalFilterFn: column => {\n      const value = instance.getCoreFlatRows()[0]?.getAllCellsByColumnId()[\n        column.id\n      ]?.value\n\n      return typeof value === 'string'\n    },\n  }\n}\n\nexport function createColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): FiltersColumn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  const getFacetInfo = memo(\n    () => [column.getPreFilteredRows()],\n    (rows = []) => {\n      let preFilteredUniqueValues = new Map<any, number>()\n\n      let preFilteredMinMaxValues: [any, any] = [\n        rows[0]?.values[column.id] ?? null,\n        rows[0]?.values[column.id] ?? null,\n      ]\n\n      for (let i = 0; i < rows.length; i++) {\n        const value = rows[i]?.values[column.id]\n\n        if (preFilteredUniqueValues.has(value)) {\n          preFilteredUniqueValues.set(\n            value,\n            (preFilteredUniqueValues.get(value) ?? 0) + 1\n          )\n        } else {\n          preFilteredUniqueValues.set(value, 1)\n        }\n\n        if (value < preFilteredMinMaxValues[0]) {\n          preFilteredMinMaxValues[0] = value\n        } else if (value > preFilteredMinMaxValues[1]) {\n          preFilteredMinMaxValues[1] = value\n        }\n      }\n\n      return {\n        preFilteredUniqueValues,\n        preFilteredMinMaxValues,\n      }\n    },\n    'column.getFacetInfo',\n    instance.options.debug\n  )\n\n  return {\n    filterType: column.filterType,\n    getCanColumnFilter: () => instance.getColumnCanColumnFilter(column.id),\n    getCanGlobalFilter: () => instance.getColumnCanGlobalFilter(column.id),\n    getColumnFilterIndex: () => instance.getColumnFilterIndex(column.id),\n    getIsColumnFiltered: () => instance.getColumnIsFiltered(column.id),\n    getColumnFilterValue: () => instance.getColumnFilterValue(column.id),\n    setColumnFilterValue: val => instance.setColumnFilterValue(column.id, val),\n    getPreFilteredUniqueValues: () => getFacetInfo().preFilteredUniqueValues,\n    getPreFilteredMinMaxValues: () => getFacetInfo().preFilteredMinMaxValues,\n    getPreFilteredRows: () => undefined,\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): FiltersInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    getColumnAutoFilterFn: columnId => {\n      const firstRow = instance.getCoreFlatRows()[0]\n\n      const value = firstRow?.values[columnId]\n\n      if (typeof value === 'string') {\n        return filterTypes.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterTypes.betweenNumberRange\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterTypes.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterTypes.arrIncludes\n      }\n\n      return filterTypes.weakEquals\n    },\n    getGlobalAutoFilterFn: () => {\n      return filterTypes.includesString\n    },\n    getColumnFilterFn: columnId => {\n      const column = instance.getColumn(columnId)\n      const userFilterTypes = instance.options.filterTypes\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.filterType)\n        ? column.filterType\n        : column.filterType === 'auto'\n        ? instance.getColumnAutoFilterFn(columnId)\n        : (userFilterTypes as Record<string, any>)?.[\n            column.filterType as string\n          ] ??\n          (filterTypes[column.filterType as BuiltInFilterType] as FilterFn<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >)\n    },\n\n    getGlobalFilterFn: () => {\n      const { filterTypes: userFilterTypes, globalFilterType } =\n        instance.options\n\n      return isFunction(globalFilterType)\n        ? globalFilterType\n        : globalFilterType === 'auto'\n        ? instance.getGlobalAutoFilterFn()\n        : (userFilterTypes as Record<string, any>)?.[\n            globalFilterType as string\n          ] ??\n          (filterTypes[globalFilterType as BuiltInFilterType] as FilterFn<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >)\n    },\n\n    setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = instance.getAllLeafColumns()\n\n      const updateFn = (old?: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = instance.getColumnFilterFn(column.id)\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      instance.options.onColumnFiltersChange?.(\n        updateFn,\n        updateFn(instance.getState().columnFilters)\n      )\n    },\n\n    setGlobalFilter: updater => {\n      instance.options.onGlobalFilterChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().globalFilter)\n      )\n    },\n\n    resetGlobalFilter: () => {\n      instance.setGlobalFilter(undefined)\n    },\n\n    getColumnCanColumnFilter: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        column.enableAllFilters ??\n        column.enableColumnFilter ??\n        instance.options.enableFilters ??\n        instance.options.enableColumnFilters ??\n        column.defaultCanFilter ??\n        column.defaultCanColumnFilter ??\n        !!column.accessorFn\n      )\n    },\n\n    getColumnCanGlobalFilter: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        ((instance.options.enableFilters ??\n          instance.options.enableGlobalFilter ??\n          column.enableAllFilters ??\n          column.enableGlobalFilter ??\n          column.defaultCanFilter ??\n          column.defaultCanGlobalFilter ??\n          !!column.accessorFn) &&\n          instance.options.getColumnCanGlobalFilterFn?.(column)) ??\n        true\n      )\n    },\n\n    getColumnIsFiltered: columnId =>\n      instance.getColumnFilterIndex(columnId) > -1,\n\n    getColumnFilterValue: columnId =>\n      instance.getState().columnFilters?.find(d => d.id === columnId)?.value,\n\n    getColumnFilterIndex: columnId =>\n      instance.getState().columnFilters?.findIndex(d => d.id === columnId) ??\n      -1,\n\n    setColumnFilterValue: (columnId, value) => {\n      if (!columnId) return\n\n      instance.setColumnFilters(old => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `React-Table: Could not find a column with id: ${columnId}`\n            )\n          }\n          throw new Error()\n        }\n\n        const filterFn = instance.getColumnFilterFn(column.id)\n        const previousfilter = old?.find(d => d.id === columnId)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousfilter ? previousfilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(\n            filterFn as FilterFn<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >,\n            newFilter,\n            column\n          )\n        ) {\n          return old?.filter(d => d.id !== columnId) ?? []\n        }\n\n        const newFilterObj = { id: columnId, value: newFilter }\n\n        if (previousfilter) {\n          return (\n            old?.map(d => {\n              if (d.id === columnId) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    },\n\n    resetColumnFilters: () => {\n      instance.setColumnFilters(\n        instance.options?.initialState?.columnFilters ?? []\n      )\n    },\n\n    getColumnFilteredRowModel: memo(\n      () => [\n        instance.getState().columnFilters,\n        instance.getCoreRowModel(),\n        instance.options.columnFilterRowsFn,\n      ],\n      (columnFilters, rowModel, columnFiltersFn) => {\n        const columnFilteredRowModel = (() => {\n          if (!columnFilters?.length || !columnFiltersFn) {\n            return rowModel\n          }\n\n          if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n            console.info('Column Filtering...')\n\n          return columnFiltersFn(instance as any, columnFilters, rowModel)\n        })()\n\n        // Now that each filtered column has it's partially filtered rows,\n        // lets assign the final filtered rows to all of the other columns\n        const nonFilteredColumns = instance\n          .getAllLeafColumns()\n          .filter(\n            column =>\n              !instance.getState().columnFilters?.find(d => d.id === column.id)\n          )\n\n        // This essentially enables faceted filter options to be built easily\n        // using every column's preFilteredRows value\n\n        nonFilteredColumns.forEach(column => {\n          column.getPreFilteredRows = () => columnFilteredRowModel.rows\n        })\n\n        return columnFilteredRowModel\n      },\n      'getColumnFilteredRowModel',\n      instance.options.debug\n    ),\n\n    getPreColumnFilteredRows: () => instance.getCoreRowModel().rows,\n    getPreColumnFilteredFlatRows: () => instance.getCoreRowModel().flatRows,\n    getPreColumnFilteredRowsById: () => instance.getCoreRowModel().rowsById,\n    getColumnFilteredRows: () => instance.getColumnFilteredRowModel().rows,\n    getColumnFilteredFlatRows: () =>\n      instance.getColumnFilteredRowModel().flatRows,\n    getColumnFilteredRowsById: () =>\n      instance.getColumnFilteredRowModel().rowsById,\n\n    getGlobalFilteredRowModel: memo(\n      () => [\n        instance.getState().globalFilter,\n        instance.getColumnFilteredRowModel(),\n        instance.options.globalFilterRowsFn,\n      ],\n      (globalFilterValue, columnFilteredRowModel, globalFiltersFn) => {\n        const globalFilteredRowModel = (() => {\n          if (!globalFiltersFn || !globalFilterValue) {\n            return columnFilteredRowModel\n          }\n\n          if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n            console.info('Global Filtering...')\n\n          return globalFiltersFn(\n            instance as ReactTable<any, any, any, any, any>,\n            globalFilterValue,\n            columnFilteredRowModel\n          )\n        })()\n\n        // Now that each filtered column has it's partially filtered rows,\n        // lets assign the final filtered rows to all of the other columns\n        const nonFilteredColumns = instance\n          .getAllLeafColumns()\n          .filter(\n            column =>\n              !instance.getState().columnFilters?.find(d => d.id === column.id)\n          )\n\n        // This essentially enables faceted filter options to be built easily\n        // using every column's preFilteredRows value\n\n        nonFilteredColumns.forEach(column => {\n          column.getPreFilteredRows = () => globalFilteredRowModel.rows\n        })\n\n        return globalFilteredRowModel\n      },\n      'getGlobalFilteredRowModel',\n      instance.options.debug\n    ),\n\n    getPreGlobalFilteredRows: () => instance.getColumnFilteredRowModel().rows,\n    getPreGlobalFilteredFlatRows: () =>\n      instance.getColumnFilteredRowModel().flatRows,\n    getPreGlobalFilteredRowsById: () =>\n      instance.getColumnFilteredRowModel().rowsById,\n    getGlobalFilteredRows: () => instance.getGlobalFilteredRowModel().rows,\n    getGlobalFilteredFlatRows: () =>\n      instance.getGlobalFilteredRowModel().flatRows,\n    getGlobalFilteredRowsById: () =>\n      instance.getGlobalFilteredRowModel().rowsById,\n  }\n}\n\nexport function shouldAutoRemoveFilter(\n  filterFn?: FilterFn<any, any, any, any, any>,\n  value?: any,\n  column?: Column<any, any, any, any, any>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { Row } from './types'\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm\n\nexport const sortTypes = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortType = keyof typeof sortTypes\n\nfunction alphanumeric<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(\n  rowA: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  rowB: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\nfunction alphanumericCaseSensitive<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rowA: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  rowB: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction text<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(\n  rowA: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  rowB: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction textCaseSensitive<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  rowA: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  rowB: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\nfunction datetime<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(\n  rowA: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  rowB: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  columnId: string\n) {\n  return compareBasic(\n    (rowA.values[columnId] as Date).getTime(),\n    (rowB.values[columnId] as Date).getTime()\n  )\n}\n\nfunction basic<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(\n  rowA: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  rowB: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  columnId: string\n) {\n  return compareBasic(rowA.values[columnId], rowB.values[columnId])\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInSortType, sortTypes } from '../sortTypes'\n\nimport {\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  ReactTable,\n  Row,\n  Updater,\n} from '../types'\n\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  propGetter,\n} from '../utils'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> =\n  {\n    (\n      rowA: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n      rowB: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n      columnId: string\n    ): number\n  }\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortType<TSortingFns> =\n  | 'auto'\n  | BuiltInSortType\n  | keyof TSortingFns\n  | SortingFn<any, any, any, TSortingFns, any>\n\nexport type SortingColumnDef<TFilterFns> = {\n  sortType?: SortType<TFilterFns>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  defaultCanSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<\n  _TData,\n  _TValue,\n  TFilterFns,\n  _TSortingFns,\n  _TAggregationFns\n> = {\n  sortType: SortType<TFilterFns>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | 'asc' | 'desc'\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n}\n\nexport type SortingOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  sortTypes?: TSortingFns\n  onSortingChange?: OnChangeFn<SortingState>\n  autoResetSorting?: boolean\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  sortRowsFn?: (\n    instance: ReactTable<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >,\n    sortingState: SortingState,\n    globalFilteredRowModel: RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  ) => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: MouseEvent | TouchEvent) => boolean\n}\n\nexport type ToggleSortingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type SortingInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  getColumnAutoSortingFn: (\n    columnId: string\n  ) => SortingFn<any, any, any, any, any> | undefined\n\n  getColumnSortingFn: (\n    columnId: string\n  ) => SortingFn<any, any, any, any, any> | undefined\n\n  setSorting: (updater: Updater<SortingState>) => void\n  toggleColumnSorting: (\n    columnId: string,\n    desc?: boolean,\n    multi?: boolean\n  ) => void\n  resetSorting: () => void\n  getColumnCanSort: (columnId: string) => boolean\n  getColumnCanMultiSort: (columnId: string) => boolean\n  getColumnIsSorted: (columnId: string) => false | 'asc' | 'desc'\n  getColumnSortIndex: (columnId: string) => number\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n  getSortedRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreSortedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreSortedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreSortedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getSortedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getSortedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getSortedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n}\n\n//\n\nexport function getDefaultColumn<TFilterFns>(): SortingColumnDef<TFilterFns> {\n  return {\n    sortType: 'auto',\n  }\n}\n\nexport function getInitialState(): SortingTableState {\n  return {\n    sorting: [],\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): SortingOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    onSortingChange: makeStateUpdater('sorting', instance),\n    autoResetSorting: true,\n  }\n}\n\nexport function createColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): SortingColumn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    sortType: column.sortType,\n    getCanSort: () => instance.getColumnCanSort(column.id),\n    getCanMultiSort: () => instance.getColumnCanMultiSort(column.id),\n    getSortIndex: () => instance.getColumnSortIndex(column.id),\n    getIsSorted: () => instance.getColumnIsSorted(column.id),\n    toggleSorting: (desc, isMulti) =>\n      instance.toggleColumnSorting(column.id, desc, isMulti),\n    getToggleSortingProps: userProps =>\n      instance.getToggleSortingProps(column.id, userProps),\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): SortingInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    getColumnAutoSortingFn: columnId => {\n      const firstRow = instance.getGlobalFilteredRowModel().flatRows[0]\n\n      const value = firstRow?.values[columnId]\n\n      if (typeof value === 'string') {\n        return sortTypes.alphanumeric\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return sortTypes.datetime\n      }\n\n      return sortTypes.basic\n    },\n    getColumnSortingFn: columnId => {\n      const column = instance.getColumn(columnId)\n      const userSortTypes = instance.options.sortTypes\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.sortType)\n        ? column.sortType\n        : column.sortType === 'auto'\n        ? instance.getColumnAutoFilterFn(columnId)\n        : (userSortTypes as Record<string, any>)?.[column.sortType as string] ??\n          (sortTypes[column.sortType as BuiltInSortType] as SortingFn<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >)\n    },\n\n    setSorting: updater =>\n      instance.options.onSortingChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().sorting)\n      ),\n\n    toggleColumnSorting: (columnId, desc, multi) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      instance.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old?.find(d => d.id === columnId)\n        const existingIndex = old?.findIndex(d => d.id === columnId)\n        const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n        let newSorting: SortingState = []\n\n        // What should we do with this sort action?\n        let sortAction\n\n        if (!column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'add'\n          }\n        } else {\n          // Normal mode\n          if (old?.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace'\n          } else if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'replace'\n          }\n        }\n\n        const sortDescFirst =\n          column.sortDescFirst ?? instance.options.sortDescFirst\n\n        // Handle toggle states that will remove the sorting\n        if (\n          sortAction === 'toggle' && // Must be toggling\n          (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          !hasDescDefined && // Must not be setting desc\n          (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n          (existingSorting?.desc // Finally, detect if it should indeed be removed\n            ? !sortDescFirst\n            : sortDescFirst)\n        ) {\n          sortAction = 'remove'\n        }\n\n        if (sortAction === 'replace') {\n          newSorting = [\n            {\n              id: columnId,\n              desc: hasDescDefined ? desc! : !!sortDescFirst,\n            },\n          ]\n        } else if (sortAction === 'add' && old?.length) {\n          newSorting = [\n            ...old,\n            {\n              id: columnId,\n              desc: hasDescDefined ? desc! : !!sortDescFirst,\n            },\n          ]\n          // Take latest n columns\n          newSorting.splice(\n            0,\n            newSorting.length -\n              (instance.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n          )\n        } else if (sortAction === 'toggle' && old?.length) {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === columnId) {\n              return {\n                ...d,\n                desc: hasDescDefined ? desc! : !existingSorting?.desc,\n              }\n            }\n            return d\n          })\n        } else if (sortAction === 'remove' && old?.length) {\n          newSorting = old.filter(d => d.id !== columnId)\n        }\n\n        return newSorting\n      })\n    },\n\n    getColumnCanSort: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        column.enableSorting ??\n        instance.options.enableSorting ??\n        column.defaultCanSort ??\n        !!column.accessorFn\n      )\n    },\n\n    getColumnCanMultiSort: columnId => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return (\n        column.enableMultiSort ??\n        instance.options.enableMultiSort ??\n        !!column.accessorFn\n      )\n    },\n\n    getColumnIsSorted: columnId => {\n      const columnSort = instance\n        .getState()\n        .sorting?.find(d => d.id === columnId)\n\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n    },\n\n    getColumnSortIndex: columnId =>\n      instance.getState().sorting?.findIndex(d => d.id === columnId) ?? -1,\n\n    resetSorting: () => {\n      instance.setSorting(instance.options?.initialState?.sorting ?? [])\n    },\n\n    getToggleSortingProps: (columnId, userProps) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      const canSort = column.getCanSort()\n\n      const initialProps: ToggleSortingProps = {\n        title: canSort ? 'Toggle Sorting' : undefined,\n        onClick: canSort\n          ? (e: MouseEvent | TouchEvent) => {\n              e.persist()\n              column.toggleSorting?.(\n                undefined,\n                column.getCanMultiSort()\n                  ? instance.options.isMultiSortEvent?.(e)\n                  : false\n              )\n            }\n          : undefined,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n\n    getSortedRowModel: memo(\n      () => [\n        instance.getState().sorting,\n        instance.getGlobalFilteredRowModel(),\n        instance.options.sortRowsFn,\n      ],\n      (sorting, rowModel, sortingFn) => {\n        if (!sortingFn || !sorting?.length) {\n          return rowModel\n        }\n\n        if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n          console.info('Sorting...')\n\n        return sortingFn(instance, sorting, rowModel)\n      },\n      'getSortedRowModel',\n      instance.options.debug\n    ),\n\n    getPreSortedRows: () => instance.getGlobalFilteredRowModel().rows,\n    getPreSortedFlatRows: () => instance.getGlobalFilteredRowModel().flatRows,\n    getPreSortedRowsById: () => instance.getGlobalFilteredRowModel().rowsById,\n    getSortedRows: () => instance.getSortedRowModel().rows,\n    getSortedFlatRows: () => instance.getSortedRowModel().flatRows,\n    getSortedRowsById: () => instance.getSortedRowModel().rowsById,\n  }\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport {\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  ReactTable,\n  Row,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n}\n\nexport type ExpandedOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanded?: boolean\n  expandRowsFn?: (\n    instance: ReactTable<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >,\n    expandedState: ExpandedState,\n    groupedRowModel: RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n  ) => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  expandSubRows?: boolean\n  defaultCanExpand?: boolean\n  getIsRowExpanded?: (\n    row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => boolean\n  getRowCanExpand?: (\n    row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ToggleExpandedProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type ExpandedInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleRowExpanded: (rowId: string, expanded?: boolean) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: () => void\n  getRowCanExpand: (rowId: string) => boolean\n  getIsRowExpanded: (rowId: string) => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getToggleAllRowsExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n  getPreExpandedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreExpandedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getPreExpandedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  getExpandedRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getExpandedFlatRows: () => Row<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getExpandedRowsById: () => Record<\n    string,\n    Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n}\n\n//\n\nexport function getInitialState(): ExpandedTableState {\n  return {\n    expanded: {},\n  }\n}\n\nexport function getDefaultOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ExpandedOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    onExpandedChange: makeStateUpdater('expanded', instance),\n    autoResetExpanded: true,\n    getIsRowExpanded: row => !!(row?.original as { expanded?: any }).expanded,\n    expandSubRows: true,\n    paginateExpandedRows: true,\n  }\n}\n\nexport function getInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ExpandedInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    setExpanded: updater =>\n      instance.options.onExpandedChange?.(\n        updater,\n        functionalUpdate(updater, instance.getState().expanded)\n      ),\n    toggleRowExpanded: (rowId, expanded) => {\n      if (!rowId) return\n\n      instance.setExpanded((old = {}) => {\n        const exists = old === true ? true : !!old?.[rowId]\n\n        let oldExpanded: ExpandedStateList = {}\n\n        if (old === true) {\n          Object.keys(instance.getRowsById()).forEach(rowId => {\n            oldExpanded[rowId] = true\n          })\n        } else {\n          oldExpanded = old\n        }\n\n        expanded = expanded ?? !exists\n\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [rowId]: true,\n          }\n        }\n\n        if (exists && !expanded) {\n          const { [rowId]: _, ...rest } = oldExpanded\n          return rest\n        }\n\n        return old\n      })\n    },\n    toggleAllRowsExpanded: expanded => {\n      if (expanded ?? !instance.getIsAllRowsExpanded()) {\n        instance.setExpanded(true)\n      } else {\n        instance.setExpanded({})\n      }\n    },\n    resetExpanded: () => {\n      instance.setExpanded(instance.options?.initialState?.expanded ?? {})\n    },\n    getIsRowExpanded: rowId => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `[ReactTable] getIsRowExpanded: no row found with id ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      const expanded = instance.getState().expanded\n\n      return !!(\n        instance.options.getIsRowExpanded?.(row) ??\n        (expanded || expanded?.[rowId])\n      )\n    },\n    getRowCanExpand: rowId => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `[ReactTable] getRowCanExpand: no row found with id ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      return (\n        instance.options.getRowCanExpand?.(row) ??\n        instance.options.enableExpanded ??\n        instance.options.defaultCanExpand ??\n        !!row.subRows?.length\n      )\n    },\n    getToggleExpandedProps: (rowId, userProps) => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        return\n      }\n\n      const canExpand = instance.getRowCanExpand(rowId)\n\n      const initialProps: ToggleExpandedProps = {\n        title: canExpand ? 'Toggle Expanded' : undefined,\n        onClick: canExpand\n          ? (e: MouseEvent | TouchEvent) => {\n              e.persist()\n              instance.toggleRowExpanded(rowId)\n            }\n          : undefined,\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n    getToggleAllRowsExpandedProps: userProps => {\n      const initialProps: ToggleExpandedProps = {\n        title: 'Toggle All Expanded',\n        onClick: (e: MouseEvent | TouchEvent) => {\n          e.persist()\n          instance.toggleAllRowsExpanded()\n        },\n      }\n\n      return propGetter(initialProps, userProps)\n    },\n    getIsAllRowsExpanded: () => {\n      const expanded = instance.getState().expanded\n\n      // If expanded is true, save some cycles and return true\n      if (expanded === true) {\n        return true\n      }\n\n      // If any row is not expanded, return false\n      if (\n        Object.keys(instance.getRowsById()).some(\n          id => !instance.getIsRowExpanded(id)\n        )\n      ) {\n        return false\n      }\n\n      // They must all be expanded :shrug:\n      return true\n    },\n    getExpandedDepth: () => {\n      let maxDepth = 0\n\n      const rowIds =\n        instance.getState().expanded === true\n          ? Object.keys(instance.getRowsById())\n          : Object.keys(instance.getState().expanded)\n\n      rowIds.forEach(id => {\n        const splitId = id.split('.')\n        maxDepth = Math.max(maxDepth, splitId.length)\n      })\n\n      return maxDepth\n    },\n    getExpandedRowModel: memo(\n      () => [\n        instance.getState().expanded,\n        instance.getGroupedRowModel(),\n        instance.options.expandRowsFn,\n        instance.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, expandRowsFn, paginateExpandedRows) => {\n        if (\n          !expandRowsFn ||\n          // Do not expand if rows are not included in pagination\n          !paginateExpandedRows ||\n          !Object.keys(expanded ?? {}).length\n        ) {\n          return rowModel\n        }\n\n        if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n          console.info('Expanding...')\n\n        return expandRowsFn(instance, expanded, rowModel)\n      },\n      'getExpandedRowModel',\n      instance.options.debug\n    ),\n\n    getPreExpandedRows: () => instance.getGroupedRowModel().rows,\n    getPreExpandedFlatRows: () => instance.getGroupedRowModel().flatRows,\n    getPreExpandedRowsById: () => instance.getGroupedRowModel().rowsById,\n    getExpandedRows: () => instance.getExpandedRowModel().rows,\n    getExpandedFlatRows: () => instance.getExpandedRowModel().flatRows,\n    getExpandedRowsById: () => instance.getExpandedRowModel().rowsById,\n  }\n}\n\nexport function createRow<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n): ExpandedRow {\n  return {\n    toggleExpanded: expanded =>\n      void instance.toggleRowExpanded(row.id, expanded),\n    getIsExpanded: () => instance.getIsRowExpanded(row.id),\n    getCanExpand: () => row.subRows && !!row.subRows.length,\n    getToggleExpandedProps: userProps => {\n      const initialProps: ToggleExpandedProps = {\n        title: 'Toggle Row Expanded',\n        onClick: (e: MouseEvent | TouchEvent) => {\n          e.stopPropagation()\n          instance.toggleRowExpanded(row.id)\n        },\n      }\n      return propGetter(initialProps, userProps)\n    },\n  }\n}\n","import {\n  flattenBy,\n  functionalUpdate,\n  propGetter,\n  memo,\n  flexRender,\n  RequiredKeys,\n} from './utils'\n\nimport {\n  Updater,\n  PropGetterValue,\n  Options,\n  TableState,\n  ColumnDef,\n  Row,\n  Column,\n  Cell,\n  Header,\n  AccessorFn,\n  HeaderRenderProps,\n  TableProps,\n  TableBodyProps,\n  PropGetter,\n  Getter,\n  RowProps,\n  CellProps,\n  ReactTable,\n  RowValues,\n  Renderable,\n} from './types'\n\nimport * as Visibility from './features/Visibility'\nimport * as Ordering from './features/Ordering'\nimport * as Pinning from './features/Pinning'\nimport * as Headers from './features/Headers'\nimport * as Filters from './features/Filters'\nimport * as Sorting from './features/Sorting'\nimport * as Grouping from './features/Grouping'\nimport * as Expanding from './features/Expanding'\nimport { RowModel } from '.'\n\n// import './features/withColumnResizing';\n// import './features/withPagination';\n// import './features/withRowSelection';\n\nexport type CoreOptions<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  data: TData[]\n  columns: ColumnDef<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  debug?: boolean\n  defaultColumn?: Partial<\n    ColumnDef<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n  initialState?: Partial<TableState>\n  state?: Partial<TableState>\n  getSubRows?: (originalRow: TData, index: number) => TData[]\n  getRowId?: (\n    originalRow: TData,\n    index: number,\n    parent?: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => string\n  onStateChange?: (newState: TableState) => void\n}\n\nexport type TableCore<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> =\n  {\n    rerender: () => void\n    initialState: TableState\n    internalState: TableState\n    reset: () => void\n    options: RequiredKeys<\n      Options<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n      'state'\n    >\n    updateOptions: (\n      newOptions: Options<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      >\n    ) => void\n    getRowId: (\n      _: TData,\n      index: number,\n      parent?: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    ) => string\n    getState: () => TableState\n    setState: (updater: Updater<TableState>) => void\n    getDefaultColumn: () => Partial<\n      ColumnDef<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    >\n    getColumnDefs: () => ColumnDef<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n    createColumn: (\n      columnDef: ColumnDef<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      >,\n      depth: number,\n      parent?: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    ) => Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    getAllColumns: () => Column<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n    getAllFlatColumns: () => Column<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n    getAllFlatColumnsById: () => Record<\n      string,\n      Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    >\n    getAllLeafColumns: () => Column<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n    getColumn: (\n      columnId: string\n    ) => Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    getColumnWidth: (columnId: string) => number\n    getTotalWidth: () => number\n    createCell: (\n      row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n      column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n      value: any\n    ) => Cell<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    createRow: (\n      id: string,\n      original: TData | undefined,\n      rowIndex: number,\n      depth: number,\n      values: Record<string, any>\n    ) => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    getCoreRowModel: () => RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n    getCoreRows: () => Row<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n    getCoreFlatRows: () => Row<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n    getCoreRowsById: () => Record<\n      string,\n      Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    >\n    getRowModel: () => RowModel<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n    getRows: () => Row<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n    getFlatRows: () => Row<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n    getRowsById: () => Record<\n      string,\n      Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    >\n    getRow: (\n      id: string\n    ) => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    getCell: (\n      rowId: string,\n      columnId: string\n    ) => Cell<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    getTableProps: PropGetter<TableProps>\n    getTableBodyProps: PropGetter<TableBodyProps>\n    getRowProps: <TGetter extends Getter<RowProps>>(\n      rowId: string,\n      userProps?: TGetter\n    ) => undefined | PropGetterValue<RowProps, TGetter>\n    getCellProps: <TGetter extends Getter<CellProps>>(\n      rowId: string,\n      columnId: string,\n      userProps?: TGetter\n    ) => undefined | PropGetterValue<CellProps, TGetter>\n  }\n\nexport type CoreRow<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> = {\n  id: string\n  index: number\n  original?: TData\n  depth: number\n  values: RowValues\n  leafRows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  subRows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  getRowProps: PropGetter<RowProps>\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getAllCellsByColumnId: () => Record<\n    string,\n    Cell<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  >\n}\n\nexport type CoreColumnDef<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = (\n  | {\n      accessorFn: AccessorFn<TData>\n      id: string\n      accessorKey?: never\n      header?:\n        | string\n        | Renderable<{\n            header: Header<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >\n            column: Column<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >\n          }>\n    }\n  | {\n      accessorKey: string & keyof TData\n      id?: string\n      accessorFn?: never\n      header?:\n        | string\n        | Renderable<{\n            header: Header<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >\n            column: Column<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >\n          }>\n    }\n  | {\n      id: string\n      accessorKey?: never\n      accessorFn?: never\n      header?:\n        | string\n        | Renderable<{\n            header: Header<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >\n            column: Column<\n              TData,\n              TValue,\n              TFilterFns,\n              TSortingFns,\n              TAggregationFns\n            >\n          }>\n    }\n  | {\n      header: string\n      id?: string\n      accessorKey?: never\n      accessorFn?: never\n    }\n) & {\n  __generated: true\n  width?: number\n  minWidth?: number\n  maxWidth?: number\n  columns?: ColumnDef<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  footer?: Renderable<{\n    header: Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  }>\n  cell?: Renderable<{\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    cell: Cell<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    value: TValue\n  }>\n  defaultIsVisible?: boolean\n}\n\nexport type CoreColumn<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData>\n  columnDef: ColumnDef<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  getWidth: () => number\n  columns: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n  parent?: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  getFlatColumns: () => Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n  getLeafColumns: () => Column<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >[]\n}\n\nexport function createTableInstance<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(\n  options: Options<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n  rerender: () => void\n): ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  if (process.env.NODE_ENV !== 'production' && options.debug) {\n    console.info('Creating React Table Instance...')\n  }\n\n  let instance = {} as ReactTable<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n\n  const defaultOptions = {\n    ...Visibility.getDefaultOptions(instance),\n    ...Ordering.getDefaultOptions(instance),\n    ...Pinning.getDefaultOptions(instance),\n    ...Filters.getDefaultOptions(instance),\n    ...Sorting.getDefaultOptions(instance),\n    ...Grouping.getDefaultOptions(instance),\n    ...Expanding.getDefaultOptions(instance),\n  }\n\n  const defaultState = {}\n\n  const buildOptions = (\n    options: Options<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => ({\n    state: defaultState,\n    ...defaultOptions,\n    ...options,\n  })\n\n  instance.options = buildOptions(options)\n\n  const initialState = {\n    ...Visibility.getInitialState(),\n    ...Ordering.getInitialState(),\n    ...Pinning.getInitialState(),\n    ...Filters.getInitialState(),\n    ...Sorting.getInitialState(),\n    ...Grouping.getInitialState(),\n    ...Expanding.getInitialState(),\n    ...(options.initialState ?? {}),\n  }\n\n  const finalInstance: ReactTable<\n    TData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  > = {\n    ...instance,\n    ...Visibility.getInstance(instance),\n    ...Ordering.getInstance(instance),\n    ...Pinning.getInstance(instance),\n    ...Headers.getInstance(instance),\n    ...Filters.getInstance(instance),\n    ...Sorting.getInstance(instance),\n    ...Grouping.getInstance(instance),\n    ...Expanding.getInstance(instance),\n    rerender,\n    initialState,\n    internalState: initialState,\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    updateOptions: newOptions => {\n      instance.options = buildOptions(newOptions)\n    },\n\n    getRowId: (\n      _: TData,\n      index: number,\n      parent?: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    ) => `${parent ? [parent.id, index].join('.') : index}`,\n\n    getState: () => {\n      return {\n        ...instance.internalState,\n        ...instance.options.state,\n      }\n    },\n\n    setState: (\n      updater: Updater<TableState>,\n      shouldRerender: boolean = true\n    ) => {\n      const newState = functionalUpdate(updater, instance.internalState)\n      const onStateChange = instance.options.onStateChange\n\n      instance.internalState = newState\n\n      if (onStateChange) {\n        onStateChange(newState)\n        return\n      }\n\n      if (shouldRerender) {\n        instance.rerender()\n      }\n    },\n\n    getDefaultColumn: memo(\n      () => [instance.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n        >\n\n        return {\n          header: (\n            props: HeaderRenderProps<\n              Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n            >\n          ) => props.header.column.id,\n          footer: (\n            props: HeaderRenderProps<\n              Header<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n            >\n          ) => props.header.column.id,\n          cell: ({ value = '' }: { value: any }): JSX.Element =>\n            typeof value === 'boolean' ? value.toString() : value,\n          ...Visibility.getDefaultColumn(),\n          ...Filters.getDefaultColumn(),\n          ...Sorting.getDefaultColumn(),\n          ...Grouping.getDefaultColumn(),\n          ...defaultColumn,\n        } as Partial<\n          ColumnDef<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n        >\n      },\n      'getDefaultColumn',\n      instance.options.debug\n    ),\n\n    getColumnDefs: () => instance.options.columns,\n\n    createColumn: (columnDef, depth: number, parent) => {\n      const defaultColumn = instance.getDefaultColumn()\n\n      let id =\n        columnDef.id ??\n        columnDef.accessorKey ??\n        (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n      let accessorFn: AccessorFn<TData> | undefined\n\n      if (columnDef.accessorFn) {\n        accessorFn = columnDef.accessorFn\n      } else if (columnDef.accessorKey) {\n        accessorFn = (originalRow?: TData) =>\n          (originalRow as any)[columnDef.accessorKey]\n      }\n\n      if (!id) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            columnDef.accessorFn\n              ? `Columns require an id when using an accessorFn`\n              : `Columns require an id when using a non-string header`\n          )\n        }\n        throw new Error()\n      }\n\n      let column: CoreColumn<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      > = {\n        width: 150,\n        minWidth: 20,\n        maxWidth: Number.MAX_SAFE_INTEGER,\n        ...defaultColumn,\n        ...columnDef,\n        id: `${id}`,\n        accessorFn,\n        parent: parent as any,\n        depth,\n        columnDef,\n        columns: [],\n        getWidth: () => instance.getColumnWidth(column.id),\n        getFlatColumns: memo(\n          () => [true],\n          () => {\n            return [\n              column as Column<\n                TData,\n                TValue,\n                TFilterFns,\n                TSortingFns,\n                TAggregationFns\n              >,\n              ...column.columns?.flatMap(d => d.getFlatColumns()),\n            ]\n          },\n          'column.getFlatColumns',\n          instance.options.debug\n        ),\n        getLeafColumns: memo(\n          () => [instance.getOrderColumnsFn()],\n          orderColumns => {\n            if (column.columns?.length) {\n              let leafColumns = column.columns.flatMap(column =>\n                column.getLeafColumns()\n              )\n\n              return orderColumns(leafColumns)\n            }\n\n            return [\n              column as Column<\n                TData,\n                TValue,\n                TFilterFns,\n                TSortingFns,\n                TAggregationFns\n              >,\n            ]\n          },\n          'column.getLeafColumns',\n          instance.options.debug\n        ),\n      }\n\n      column = Object.assign(\n        column,\n        Visibility.createColumn(\n          column as Column<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          instance\n        ),\n        Pinning.createColumn(\n          column as Column<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          instance\n        ),\n        Filters.createColumn(\n          column as Column<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          instance\n        ),\n        Sorting.createColumn(\n          column as Column<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          instance\n        ),\n        Grouping.createColumn(\n          column as Column<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          instance\n        )\n      )\n\n      // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n      return column as Column<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      >\n    },\n\n    getAllColumns: memo(\n      () => [instance.getColumnDefs()],\n      columnDefs => {\n        if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n          console.info('Building Columns...')\n\n        const recurseColumns = (\n          columnDefs: ColumnDef<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >[],\n          parent?: Column<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          depth = 0\n        ): Column<\n          TData,\n          TValue,\n          TFilterFns,\n          TSortingFns,\n          TAggregationFns\n        >[] => {\n          return columnDefs.map(columnDef => {\n            const column = instance.createColumn(columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      'getAllColumns',\n      instance.options.debug\n    ),\n\n    getAllFlatColumns: memo(\n      () => [instance.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      'getAllFlatColumns',\n      instance.options.debug\n    ),\n\n    getAllFlatColumnsById: memo(\n      () => [instance.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>>)\n      },\n      'getAllFlatColumnsById',\n      instance.options.debug\n    ),\n\n    getAllLeafColumns: memo(\n      () => [instance.getAllColumns(), instance.getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      'getAllLeafColumns',\n      instance.options.debug\n    ),\n\n    getColumn: columnId => {\n      const column = instance.getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `[React Table] Column with id ${columnId} does not exist.`\n          )\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n\n    getColumnWidth: (columnId: string) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      return Math.min(\n        Math.max(column.minWidth ?? 0, column.width ?? 0),\n        column.maxWidth ?? 0\n      )\n    },\n\n    createCell: (row, column, value) => {\n      const cell: Cell<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      > = {\n        id: `${row.id}_${column.id}`,\n        rowId: row.id,\n        columnId: column.id,\n        row,\n        column,\n        value,\n        getCellProps: userProps =>\n          instance.getCellProps(row.id, column.id, userProps)!,\n        renderCell: () => flexRender(column.cell, { column, cell, value }),\n      }\n\n      Object.assign(cell, {\n        ...Grouping.createCell(\n          cell as Cell<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          > &\n            Grouping.GroupingCell,\n          column,\n          row as Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n          instance\n        ),\n      })\n\n      return cell\n    },\n\n    createRow: (id, original, rowIndex, depth, values) => {\n      let row: CoreRow<\n        TData,\n        TValue,\n        TFilterFns,\n        TSortingFns,\n        TAggregationFns\n      > = {\n        id,\n        index: rowIndex,\n        original,\n        depth,\n        values,\n        subRows: [],\n        leafRows: [],\n        getRowProps: userProps => instance.getRowProps(row.id, userProps)!,\n        getAllCells: undefined!,\n        getAllCellsByColumnId: undefined!,\n      }\n\n      row.getAllCells = memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(\n              row as Row<\n                TData,\n                TValue,\n                TFilterFns,\n                TSortingFns,\n                TAggregationFns\n              >,\n              column,\n              row.values[column.id]\n            )\n          })\n        },\n        process.env.NODE_ENV !== 'production' ? 'row.getAllCells' : '',\n        instance.options.debug\n      )\n\n      row.getAllCellsByColumnId = memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>>)\n        },\n        'row.getAllCellsByColumnId',\n        instance.options.debug\n      )\n\n      row = Object.assign(\n        row,\n        Headers.createRow(\n          row as Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n          instance\n        ),\n        Grouping.createRow(\n          row as Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n          instance\n        ),\n        Expanding.createRow(\n          row as Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>,\n          instance\n        )\n      )\n\n      return row as Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    },\n\n    getCoreRowModel: memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n        flatRows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n        rowsById: Record<\n          string,\n          Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n        >\n      } => {\n        if (process.env.NODE_ENV !== 'production' && instance.options.debug)\n          console.info('Accessing...')\n\n        // Auto-reset data-dependent states if configured\n        if (\n          instance.options.autoResetColumnFilters &&\n          // @ts-ignore\n          instance.getRowModelNonFirst\n        ) {\n          instance.resetColumnFilters()\n        }\n\n        if (\n          instance.options.autoResetGlobalFilter &&\n          // @ts-ignore\n          instance.getRowModelNonFirst\n        ) {\n          instance.resetGlobalFilter()\n        }\n\n        if (\n          instance.options.autoResetSorting &&\n          // @ts-ignore\n          instance.getRowModelNonFirst\n        ) {\n          instance.resetSorting()\n        }\n\n        if (\n          instance.options.autoResetGrouping &&\n          // @ts-ignore\n          instance.getRowModelNonFirst\n        ) {\n          instance.resetGrouping()\n        }\n\n        if (\n          instance.options.autoResetExpanded &&\n          // @ts-ignore\n          instance.getRowModelNonFirst\n        ) {\n          instance.resetExpanded()\n        }\n\n        // @ts-ignore\n        instance.getRowModelNonFirst = true\n\n        // Access the row model using initial columns\n        const rows: Row<\n          TData,\n          TValue,\n          TFilterFns,\n          TSortingFns,\n          TAggregationFns\n        >[] = []\n        const flatRows: Row<\n          TData,\n          TValue,\n          TFilterFns,\n          TSortingFns,\n          TAggregationFns\n        >[] = []\n        const rowsById: Record<\n          string,\n          Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n        > = {}\n\n        const leafColumns = instance.getAllLeafColumns()\n\n        const accessRow = (\n          originalRow: TData,\n          rowIndex: number,\n          depth = 0,\n          parentRows: Row<\n            TData,\n            TValue,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >[],\n          parent?: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n        ) => {\n          const id = instance.getRowId(originalRow, rowIndex, parent)\n\n          if (!id) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`getRowId expected an ID, but got ${id}`)\n            }\n          }\n\n          const values: Record<string, any> = {}\n\n          for (let i = 0; i < leafColumns.length; i++) {\n            const column = leafColumns[i]\n            if (column && column.accessorFn) {\n              values[column.id] = column.accessorFn(originalRow, rowIndex)\n            }\n          }\n\n          // Make the row\n          const row = instance.createRow(\n            id,\n            originalRow,\n            rowIndex,\n            depth,\n            values\n          )\n\n          // Push instance row into the parentRows array\n          parentRows.push(row)\n          // Keep track of every row in a flat array\n          flatRows.push(row)\n          // Also keep track of every row by its ID\n          rowsById[id] = row\n\n          // Get the original subrows\n          if (instance.options.getSubRows) {\n            const originalSubRows = instance.options.getSubRows(\n              originalRow,\n              rowIndex\n            )\n\n            // Then recursively access them\n            if (originalSubRows?.length) {\n              row.originalSubRows = originalSubRows\n              const subRows: Row<\n                TData,\n                TValue,\n                TFilterFns,\n                TSortingFns,\n                TAggregationFns\n              >[] = []\n\n              for (let i = 0; i < row.originalSubRows.length; i++) {\n                accessRow(\n                  row.originalSubRows[i] as TData,\n                  i,\n                  depth + 1,\n                  subRows,\n                  row\n                )\n              }\n              // Keep the new subRows array on the row\n              row.subRows = subRows\n              row.leafRows = flattenBy(subRows, d => d.leafRows)\n            }\n          }\n        }\n\n        for (let i = 0; i < data.length; i++) {\n          accessRow(data[i] as TData, i, 0, rows)\n        }\n\n        return { rows, flatRows, rowsById }\n      },\n      'getRowModel',\n      instance.options.debug\n    ),\n\n    // The standard\n\n    getCoreRows: () => {\n      return instance.getCoreRowModel().rows\n    },\n\n    getCoreFlatRows: () => {\n      return instance.getCoreRowModel().flatRows\n    },\n\n    getCoreRowsById: () => {\n      return instance.getCoreRowModel().rowsById\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return instance.getExpandedRowModel()\n    },\n\n    getRows: () => {\n      return instance.getRowModel().rows\n    },\n\n    getFlatRows: () => {\n      return instance.getRowModel().flatRows\n    },\n\n    getRowsById: () => {\n      return instance.getRowModel().rowsById\n    },\n\n    getRow: (id: string) => {\n      const row = instance.getRowsById()[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n\n    getCell: (rowId: string, columnId: string) => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`[React Table] could not find row with id ${rowId}`)\n        }\n        throw new Error()\n      }\n\n      const cell = row.getAllCellsByColumnId()[columnId]\n\n      if (!cell) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `[React Table] could not find cell ${columnId} in row ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      return cell\n    },\n\n    getTableProps: userProps => {\n      return propGetter(\n        {\n          role: 'table',\n        },\n        userProps\n      )\n    },\n\n    getTableBodyProps: userProps => {\n      return propGetter(\n        {\n          role: 'rowgroup',\n        },\n        userProps\n      )\n    },\n\n    getRowProps: (rowId, userProps) => {\n      const row = instance.getRow(rowId)\n      if (!row) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: row.id,\n          role: 'row',\n        },\n        userProps\n      )\n    },\n\n    getCellProps: (rowId, columnId, userProps) => {\n      const cell = instance.getCell(rowId, columnId)\n\n      if (!cell) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: cell.id,\n          role: 'gridcell',\n        },\n        userProps\n      )\n    },\n  }\n\n  return Object.assign(instance, finalInstance)\n}\n","import * as React from 'react'\nimport { Cell, Column, Row } from '.'\nimport { createTableInstance } from './core'\nimport { ReactTable, ColumnDef, AccessorFn, Options } from './types'\nimport { Overwrite } from './utils'\n\ntype TableHelper<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> = {\n  RowType: <TTData>() => TableHelper<\n    TTData,\n    TValue,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n\n  FilterFns: <TTFilterFns>(\n    filterFns: TTFilterFns\n  ) => TableHelper<TData, TValue, TTFilterFns, TSortingFns, TAggregationFns>\n\n  SortingFns: <TTSortingFns>(\n    sortingFns: TTSortingFns\n  ) => TableHelper<TData, TValue, TFilterFns, TTSortingFns, TAggregationFns>\n\n  AggregationFns: <TTAggregationFns>(\n    aggregationFns: TTAggregationFns\n  ) => TableHelper<TData, TValue, TFilterFns, TSortingFns, TTAggregationFns>\n\n  createColumns: (\n    columns: ColumnDef<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >[]\n  ) => ColumnDef<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[]\n\n  createGroup: (\n    column: Overwrite<\n      ColumnDef<TData, unknown, TFilterFns, TSortingFns, TAggregationFns>,\n      { __generated?: never; accessorFn?: never; accessorKey?: never }\n    >\n  ) => ColumnDef<TData, unknown, TFilterFns, TSortingFns, TAggregationFns>\n\n  createColumn: <TAccessor extends AccessorFn<TData> | keyof TData>(\n    accessor: TAccessor,\n    column: TAccessor extends (...args: any[]) => any\n      ? // Accessor Fn\n        Overwrite<\n          ColumnDef<\n            TData,\n            ReturnType<TAccessor>,\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          {\n            __generated?: never\n            accessorFn?: never\n            accessorKey?: never\n            id: string\n          }\n        >\n      : TAccessor extends keyof TData\n      ? // Accessor Key\n        Overwrite<\n          ColumnDef<\n            TData,\n            TData[TAccessor],\n            TFilterFns,\n            TSortingFns,\n            TAggregationFns\n          >,\n          { __generated?: never; accessorFn?: never; accessorKey?: never }\n        >\n      : never\n  ) => ColumnDef<\n    TData,\n    TAccessor extends (...args: any[]) => any\n      ? ReturnType<TAccessor>\n      : TAccessor extends keyof TData\n      ? TData[TAccessor]\n      : never,\n    TFilterFns,\n    TSortingFns,\n    TAggregationFns\n  >\n\n  useTable: <TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(\n    options: Options<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  ) => ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n\n  types: {\n    instance: ReactTable<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n    columnDef: ColumnDef<\n      TData,\n      TValue,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns\n    >\n    column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    row: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    cell: Cell<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n  }\n}\n\nexport function createTable<\n  TData,\n  TValue,\n  TFilterFns,\n  TSortingFns,\n  TAggregationFns\n>(): TableHelper<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> {\n  return {\n    RowType: () => createTable(),\n    FilterFns: () => createTable(),\n    SortingFns: () => createTable(),\n    AggregationFns: () => createTable(),\n    createColumns: columns => columns,\n    createColumn: (accessor, column) => {\n      column = {\n        ...column,\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n          __generated: true,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n          __generated: true,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n    createGroup: column => ({\n      ...column,\n      __generated: true,\n    }),\n    useTable: <TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(\n      options: Options<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n    ): ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> => {\n      const instanceRef = React.useRef<\n        ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n      >(undefined!)\n\n      const rerender = React.useReducer(() => ({}), {})[1]\n\n      if (!instanceRef.current) {\n        instanceRef.current = createTableInstance<\n          TData,\n          TValue,\n          TFilterFns,\n          TSortingFns,\n          TAggregationFns\n        >(options, rerender)\n      }\n\n      instanceRef.current.updateOptions(options)\n\n      return instanceRef.current\n    },\n    types: undefined as any,\n  } as TableHelper<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>\n}\n"],"names":["columnFilterRowsFn","instance","columnFilters","rowModel","newFilteredFlatRows","newFilteredRowsById","filterFromChildrenUp","options","filterRows","rowsToFilter","depth","forEach","columnId","id","filterValue","value","column","getColumn","console","warn","Error","preFilteredRows","getPreFilteredRows","filterFn","getColumnFilterFn","recurseFilterRows","filter","row","subRows","length","push","rows","flatRows","rowsById","globalFilterRowsFn","globalFilter","getGlobalFilterFn","filterableColumns","getAllLeafColumns","getCanGlobalFilter","filterableColumnIds","map","d","sortRowsFn","sortingState","sortedFlatRows","availableSorting","sort","getColumnCanSort","columnInfoById","sortEntry","sortUndefined","invertSorting","sortingFn","getColumnSortingFn","sortData","sortedData","slice","rowA","rowB","i","columnInfo","isDesc","desc","aValue","values","bValue","aUndefined","bUndefined","sortInt","index","functionalUpdate","updater","input","makeStateUpdater","key","setState","old","document","React","useLayoutEffect","useEffect","isFunction","Function","flattenBy","arr","getChildren","flat","recurse","subArr","item","children","propGetter","initial","getter","memo","getDeps","fn","debug","deps","result","newDeps","newSerializedDeps","oldSerializedDeps","depsChanged","some","dep","info","_","Boolean","reduce","accu","curr","parent","flexRender","Comp","props","isReactComponent","component","isClassComponent","isExoticComponent","proto","Object","getPrototypeOf","prototype","$$typeof","includes","description","groupRowsFn","groupingState","sortedRowModel","existingGrouping","aggregateRowsToValues","leafRows","groupedRows","aggregateFn","getColumnAggregationFn","groupedValues","leafValues","columnValue","aggregateValue","aggregationType","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","Array","from","entries","groupingValue","createRow","undefined","assign","groupingColumnId","subRow","groupMap","Map","resKey","previous","get","set","expandRowsFn","_expandedState","expandedRows","expandSubRows","handleRow","getIsRowExpanded","getInitialState","columnVisibility","getDefaultOptions","onColumnVisibilityChange","getDefaultColumn","defaultIsVisible","createColumn","getCanHide","getColumnCanHide","getIsVisible","getColumnIsVisible","toggleVisibility","toggleColumnVisibility","getToggleVisibilityProps","userProps","type","checked","title","onChange","e","target","getInstance","getVisibleFlatColumns","getAllFlatColumns","join","allFlatColumns","getVisibleLeafColumns","setColumnVisibility","getState","toggleAllColumnsVisible","getIsAllColumnsVisible","obj","enableHiding","defaultCanHide","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityProps","indeterminate","aggregationTypes","sum","min","max","extent","mean","median","unique","uniqueCount","count","_leafValues","childValues","next","Math","Set","size","grouping","onGroupingChange","autoResetGrouping","groupedColumnMode","getCanGroup","getColumnCanGroup","getGroupedIndex","getColumnGroupedIndex","getIsGrouped","getColumnIsGrouped","toggleGrouping","toggleColumnGrouping","getToggleGroupingProps","getColumnAutoAggregationFn","firstRow","getCoreFlatRows","toString","call","userAggregationTypes","getColumnAutoFilterFn","setGrouping","enableGrouping","defaultCanGroup","accessorFn","indexOf","resetGrouping","initialState","canGroup","initialProps","onClick","persist","getRowIsGrouped","rowId","getRow","getGroupedRowModel","getSortedRowModel","getPreGroupedRows","getPreGroupedFlatRows","getPreGroupedRowsById","getGroupedRows","getGroupedFlatRows","getGroupedRowsById","createCell","cell","_instance","getIsPlaceholder","getIsAggregated","orderColumns","leafColumns","nonGroupingColumns","col","groupingColumns","g","find","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","getOrderColumnsFn","columns","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","findIndex","splice","Grouping","columnPinning","left","right","onColumnPinningChange","getCanPin","getColumnCanPin","getPinnedIndex","getColumnPinnedIndex","getIsPinned","getColumnIsPinned","pin","position","pinColumn","setColumnPinning","resetColumnPinning","columnIds","getLeafColumns","enablePinning","defaultCanPin","leafColumnIds","isLeft","isRight","_getAllVisibleCells","getAllCells","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","center","allCells","leftAndRight","cells","createHeader","header","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","getWidth","getLeafHeaders","leafHeaders","recurseHeader","h","getHeaderProps","getFooterProps","renderHeader","renderFooter","footer","getHeaderGroups","getAllColumns","allColumns","leftColumns","rightColumns","centerColumns","headerGroups","buildHeaderGroups","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headerGroup","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","getHeader","getHeaderGroupProps","role","getFooterGroupProps","getTotalWidth","width","columnsToGroup","headerFamily","maxDepth","findMaxDepth","createHeaderGroup","headersToGroup","getterValue","parentHeaders","headerToGroup","latestParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","filterTypes","includesString","includesStringSensitive","equalsString","equalsStringSensitive","arrIncludes","arrIncludesAll","equals","weakEquals","betweenNumberRange","search","String","toLowerCase","autoRemove","val","testFalsey","rowValue","every","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","Number","isNaN","Infinity","temp","filterType","onColumnFiltersChange","onGlobalFilterChange","autoResetColumnFilters","autoResetGlobalFilter","globalFilterType","getColumnCanGlobalFilterFn","getAllCellsByColumnId","getFacetInfo","preFilteredUniqueValues","preFilteredMinMaxValues","has","getCanColumnFilter","getColumnCanColumnFilter","getColumnCanGlobalFilter","getColumnFilterIndex","getIsColumnFiltered","getColumnIsFiltered","getColumnFilterValue","setColumnFilterValue","getPreFilteredUniqueValues","getPreFilteredMinMaxValues","isArray","getGlobalAutoFilterFn","userFilterTypes","setColumnFilters","updateFn","shouldAutoRemoveFilter","setGlobalFilter","resetGlobalFilter","enableAllFilters","enableColumnFilter","enableFilters","enableColumnFilters","defaultCanFilter","defaultCanColumnFilter","enableGlobalFilter","defaultCanGlobalFilter","previousfilter","newFilter","newFilterObj","resetColumnFilters","getColumnFilteredRowModel","getCoreRowModel","columnFiltersFn","columnFilteredRowModel","nonFilteredColumns","getPreColumnFilteredRows","getPreColumnFilteredFlatRows","getPreColumnFilteredRowsById","getColumnFilteredRows","getColumnFilteredFlatRows","getColumnFilteredRowsById","getGlobalFilteredRowModel","globalFilterValue","globalFiltersFn","globalFilteredRowModel","getPreGlobalFilteredRows","getPreGlobalFilteredFlatRows","getPreGlobalFilteredRowsById","getGlobalFilteredRows","getGlobalFilteredFlatRows","getGlobalFilteredRowsById","reSplitAlphaNumeric","sortTypes","alphanumeric","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","compareAlphanumeric","aStr","bStr","a","split","b","aa","bb","an","parseInt","bn","combo","compareBasic","getTime","sortType","sorting","onSortingChange","autoResetSorting","getCanSort","getCanMultiSort","getColumnCanMultiSort","getSortIndex","getColumnSortIndex","getIsSorted","getColumnIsSorted","toggleSorting","isMulti","toggleColumnSorting","getToggleSortingProps","getColumnAutoSortingFn","userSortTypes","setSorting","multi","existingSorting","existingIndex","hasDescDefined","newSorting","sortAction","sortDescFirst","enableSortingRemoval","enableMultiRemove","maxMultiSortColCount","MAX_SAFE_INTEGER","enableSorting","defaultCanSort","enableMultiSort","columnSort","resetSorting","canSort","isMultiSortEvent","getPreSortedRows","getPreSortedFlatRows","getPreSortedRowsById","getSortedRows","getSortedFlatRows","getSortedRowsById","expanded","onExpandedChange","autoResetExpanded","original","paginateExpandedRows","setExpanded","toggleRowExpanded","exists","oldExpanded","keys","getRowsById","rest","toggleAllRowsExpanded","getIsAllRowsExpanded","resetExpanded","getRowCanExpand","enableExpanded","defaultCanExpand","getToggleExpandedProps","canExpand","getToggleAllRowsExpandedProps","getExpandedDepth","rowIds","splitId","getExpandedRowModel","getPreExpandedRows","getPreExpandedFlatRows","getPreExpandedRowsById","getExpandedRows","getExpandedFlatRows","getExpandedRowsById","toggleExpanded","getIsExpanded","getCanExpand","stopPropagation","createTableInstance","rerender","defaultOptions","Visibility","Ordering","Pinning","Filters","Sorting","Expanding","defaultState","buildOptions","state","finalInstance","Headers","internalState","reset","updateOptions","newOptions","getRowId","shouldRerender","newState","onStateChange","defaultColumn","getColumnDefs","columnDef","accessorKey","originalRow","minWidth","maxWidth","getColumnWidth","getFlatColumns","flatMap","columnDefs","recurseColumns","getAllFlatColumnsById","flatColumns","acc","getCellProps","renderCell","rowIndex","getRowProps","data","getRowModelNonFirst","accessRow","parentRows","getSubRows","originalSubRows","getCoreRows","getCoreRowsById","getRowModel","getRows","getFlatRows","getCell","getTableProps","getTableBodyProps","createTable","RowType","FilterFns","SortingFns","AggregationFns","createColumns","accessor","__generated","createGroup","useTable","instanceRef","useRef","useReducer","current","types"],"mappings":"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"}