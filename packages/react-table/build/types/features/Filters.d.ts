import { RowModel } from '..';
import { BuiltInFilterType } from '../filterTypes';
import { Column, OnChangeFn, ReactTable, Row, Updater } from '../types';
export declare type ColumnFilter = {
    id: string;
    value: unknown;
};
export declare type ColumnFiltersState = ColumnFilter[];
export declare type FilterFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> = {
    (rows: Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[], columnIds: string[], filterValue: any): any;
    autoRemove?: ColumnFilterAutoRemoveTestFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>;
};
export declare type ColumnFilterAutoRemoveTestFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> = (value: unknown, column?: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>) => boolean;
export declare type CustomFilterTypes<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> = Record<string, FilterFn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>>;
export declare type FiltersTableState = {
    columnFilters: ColumnFiltersState;
    globalFilter: any;
};
export declare type FilterType<TFilterFns> = 'auto' | BuiltInFilterType | keyof TFilterFns | FilterFn<unknown, unknown, TFilterFns, any, any>;
export declare type FiltersColumnDef<TFilterFns> = {
    filterType?: FilterType<TFilterFns>;
    enableAllFilters?: boolean;
    enableColumnFilter?: boolean;
    enableGlobalFilter?: boolean;
    defaultCanFilter?: boolean;
    defaultCanColumnFilter?: boolean;
    defaultCanGlobalFilter?: boolean;
};
export declare type FiltersColumn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> = {
    filterType: FilterType<TFilterFns>;
    getCanColumnFilter: () => boolean;
    getCanGlobalFilter: () => boolean;
    getColumnFilterIndex: () => number;
    getIsColumnFiltered: () => boolean;
    getColumnFilterValue: () => unknown;
    setColumnFilterValue: (value: any) => void;
    getPreFilteredRows: () => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[] | undefined;
    getPreFilteredUniqueValues: () => Map<any, number>;
    getPreFilteredMinMaxValues: () => [any, any];
};
export declare type FiltersOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> = {
    filterFromChildrenUp?: boolean;
    filterTypes?: TFilterFns;
    enableFilters?: boolean;
    onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>;
    autoResetColumnFilters?: boolean;
    enableColumnFilters?: boolean;
    columnFilterRowsFn?: (instance: ReactTable<any, any, any, any, any>, columnFilters: ColumnFiltersState, coreRowModel: RowModel<any, any, any, any, any>) => RowModel<any, any, any, any, any>;
    globalFilterType?: FilterType<TFilterFns>;
    onGlobalFilterChange?: OnChangeFn<any>;
    enableGlobalFilters?: boolean;
    autoResetGlobalFilter?: boolean;
    enableGlobalFilter?: boolean;
    globalFilterRowsFn?: (instance: ReactTable<any, any, any, any, any>, globalFilter: any, columnFilteredRowModel: RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>) => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>;
    getColumnCanGlobalFilterFn?: (column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>) => boolean;
};
export declare type FiltersInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns> = {
    getColumnAutoFilterFn: (columnId: string) => FilterFn<any, any, any, any, any> | undefined;
    getColumnFilterFn: (columnId: string) => FilterFn<any, any, any, any, any> | undefined;
    setColumnFilters: (updater: Updater<ColumnFiltersState>) => void;
    setColumnFilterValue: (columnId: string, value: any) => void;
    resetColumnFilters: () => void;
    getColumnCanColumnFilter: (columnId: string) => boolean;
    getColumnCanGlobalFilterFn?: (column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>) => boolean;
    getColumnIsFiltered: (columnId: string) => boolean;
    getColumnFilterValue: (columnId: string) => unknown;
    getColumnFilterIndex: (columnId: string) => number;
    getColumnFilteredRowModel: () => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>;
    getPreColumnFilteredRows: () => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[];
    getPreColumnFilteredFlatRows: () => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[];
    getPreColumnFilteredRowsById: () => Record<string, Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>>;
    getColumnFilteredRows: () => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[];
    getColumnFilteredFlatRows: () => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[];
    getColumnFilteredRowsById: () => Record<string, Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>>;
    setGlobalFilter: (updater: Updater<any>) => void;
    resetGlobalFilter: () => void;
    getGlobalAutoFilterFn: () => FilterFn<any, any, any, any, any> | undefined;
    getGlobalFilterFn: () => FilterFn<any, any, any, any, any> | undefined;
    getColumnCanGlobalFilter: (columnId: string) => boolean;
    getGlobalFilteredRowModel: () => RowModel<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>;
    getPreGlobalFilteredRows: () => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[];
    getPreGlobalFilteredFlatRows: () => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[];
    getPreGlobalFilteredRowsById: () => Record<string, Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>>;
    getGlobalFilteredRows: () => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[];
    getGlobalFilteredFlatRows: () => Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>[];
    getGlobalFilteredRowsById: () => Record<string, Row<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>>;
};
export declare function getDefaultColumn<TFilterFns>(): FiltersColumnDef<TFilterFns>;
export declare function getInitialState(): FiltersTableState;
export declare function getDefaultOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>): FiltersOptions<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>;
export declare function createColumn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(column: Column<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>, instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>): FiltersColumn<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>;
export declare function getInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>(instance: ReactTable<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>): FiltersInstance<TData, TValue, TFilterFns, TSortingFns, TAggregationFns>;
export declare function shouldAutoRemoveFilter(filterFn?: FilterFn<any, any, any, any, any>, value?: any, column?: Column<any, any, any, any, any>): boolean;
